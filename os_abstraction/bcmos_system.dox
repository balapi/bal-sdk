/*
 * bcmos_system.dox
 *
 * Maple System Services - main doc page
 */

/** \defgroup system OS Abstraction Layer
 *
 * This section details the following modules.
 * @{
 */
 
/** \defgroup system_init OS Abstraction Layer Initialization
 */
 
/** \defgroup system_model System Model
 *
 * “Task”, “Message”, “Timer” and “Event“ services support 
 * “traditional” and “integrated” modes of operation (or their mix).\n
 *
 * 
 * In “traditional” mode:
 * - Task has an arbitrary user-defined task handler
 * - Message queue is drained by an explicit call to the bcmos_msg_recv() function.
 *   The message extracted from the queue is processed in an arbitrary way
 * - Events are “received” using an explicit call to bcmos_event_recv() function
 * - Timer handlers are called in “timer ISR” context
 *
 * 
 * In “integrated” mode all of those services work together so that 
 * 	all “triggers” end up in the target module’s message queue.\n 
 * 	The default task handler drains those message queues in task+module context 
 * 	and calls callbacks associated with registered messages, events and timers.\n
 * 	That is, in this mode “module” is a set of callbacks. 
 * 	There is no user-defined “glue” that “pulls” messages and events.
 *\n\n
 * The following requirements must be met in order to support the “integration” mode efficiently:
 * - It must be cheap to convert timer expirations and events into messages that can be put into module’s message queue. 
 *   It is done by inclusion of “message header” into timer and event control blocks.
 * - It must be guaranteed that timer expiration indications and events are never lost, even if the target message queue is full. 
 *   It is achieved by implementing message queue as LL and ignoring queue size limit in some cases
 * - It must be possible to handle timer expiration indications and events as urgent. 
 *   It can be achieved by putting the appropriate messages at the head of the message queue rather than its tail
 *\n
 * More details in \ref system_msg, \ref system_timer and \ref system_event sections
 */
 
/** \defgroup system_task Task Service
 *
 * A Task is a scheduling unit wrapped around an OS thread.
 * A Task can be locked to a specific core or scheduled on any core.
 * Although BCM68620 SAL supports tasks with arbitrary task handler,
 * it also provides a default task handler.\n
 * This default task handler goes over the task’s modules and
 * drains their message queues (RR between modules).
 * In this mode all module “triggers” (messages, timers, events)
 * end up in a single context – module's message queue (\ref system_module)
 */

/** \defgroup system_module Module Service
 *
 * Module handles some specific functionality in context of the task that “owns” it.\n 
 * Module must be attached to a task. A single task can have multiple modules attached to it.\n
 * - Each module has a single message queue 
 * - Each module is uniquely identified by module_id. This identification is used to send messages to module
 *\n
 * In other words, a module can be viewed as globally-identifiable message queue + user context + 
 * callbacks functions – for each expected message, timer or event.
 *\n 
 * A module has the following properties:
 * - Name
 * - Id
 * - Context (user data)
 * - Message queue
 *\n
 * Typically, modules are used in “integrated mode”.\n
 * Once module is registered, its message queue is the sole input that “triggers” 
 * code execution.\n 
 * Structurally, “module” consists of 
 * - “Init” callback that is executed once when module is registered. 
 *    The "Init" callback registers all message types that module is going to handle with global message dispatcher.
 * - “Exit” callback that is executed once when module is unregistered
 * - Callbacks are associated with specific messages, timers and events. 
 *   These callbacks are called in module+task context when the default task handler drains the module’s message queue
 */

/** \defgroup system_msg Inter-process Messaging Service
 *
 * Message queue service is the main mechanism for inter-process communication. 
 * Most functions in this chapter are low-level and are used only in “traditional” mode. 
 * In “integration” mode message queue functions are called internally. \n
 * A Message queue is a linked list of Messages, where message can encapsulate the following:
 * - Arbitrary inter-process communication request
 * - Timer expiration
 * - Event(s)
 * - Host request/response/indication
 */

/** \defgroup system_event Event Service
 *
 * Events differ from regular message services in that they are “sticky”. 
 * A single event can be raised multiple times and then handled once.\n\n
 * Events are organized into “sets” (or “groups”). Each set is 32-bit word that can contain up to 
 * 32 individual event bits. Event sets are identified by globally unique event set id.\n\n
 * Event set control block includes message header. 
 * Therefore, each event set is “associated” with one and only one message.  
 * In “integrated” mode, “raising” event is translated into urgent post of 
 * this message to the target module.
 * If more events from the same set are raised before they are handled, 
 * active event mask is updated without re-posting the message.
 */

/** \defgroup system_timer Timer Service
 *
 * System Abstraction Layer supports timers with “us” resolution.\n
 * Each timer can be created in either “integration” or “traditional” mode (see \ref system_model). 
 * Timer created in “integration” mode in converted to “urgent” message and “fires” in the context 
 * of the module that owns the timer.\n
 * Timers created in “traditional” mode fire in the context of timer ISR.\n
 * Note that “integrated” timers are inherently less precise than “traditional”. 
 * On the other hand, “integrated” timers simplify module’s FSMs because everything happens in a single context.
 */

/** \defgroup system_mem Dynamic Memory Management
 */

/** \defgroup system_sync Synchronization Primitives
 * @{
 */

/** \defgroup system_fastlock Fast Synchronization (interrupt-level lock)
 */

/** \defgroup system_mutex Recursive Mutex
 */

/** \defgroup system_sem Counting Semaphore
 */

/** @} system_sync */

/** \defgroup system_list Linked Lists and Queues
 * System Abstraction Layer includes bcmos_queue.h header which implements BSD queue functionality.
 * Explanations of how to use different BSD list flavors can be found in the Internet. For example, 
 * here <a href="http://www.gsp.com/cgi-bin/man.cgi?section=3&amp;topic=queue">BSQ Queue Reference</a>
 */

/** \defgroup system_endian Endian Swapping Service
 */

/** \defgroup system_trace Debug trace
 */

/** \defgroup system_buf Buffer service
  * This low-level service is intended primarily for transport drivers.
  * It abstracts primitives for manipulating transport/network buffers.
  */

/** \defgroup system_cache Data Cache Service
  * This low-level service is intended primarily for transport drivers.
  * It abstracts primitives for data cache invalidation and flush.
  */
  
/** \defgroup system_interrupt Interrupt Control
  * This low-level service is intended primarily for transport drivers.
  * It abstracts primitives for interrupt handler registration and masking/unmasking an interrupt.
  */
  
/** @} */
