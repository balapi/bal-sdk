/** \page object_model Object Model

<table>
\TABLE_HDR3{Object Name,Object Description,Object ID}
\TABLE_ROW3{\subpage object_access_control "access_control", access control,\ref BCMOLT_OBJ_ID_ACCESS_CONTROL}
\TABLE_ROW3{\subpage object_bal_system "bal_system", BAL System Wide Global Config record,\ref BCMOLT_OBJ_ID_BAL_SYSTEM}
\TABLE_ROW3{\subpage object_device "device", Singleton object representing the device as a whole,\ref BCMOLT_OBJ_ID_DEVICE}
\TABLE_ROW3{\subpage object_erps_interface "erps_interface", G.8032 Ethernet Ring Protection Switching ERPS,\ref BCMOLT_OBJ_ID_ERPS_INTERFACE}
\TABLE_ROW3{\subpage object_eth_oam "eth_oam", Container to provision OAMP for Ethernet OAM features. ,\ref BCMOLT_OBJ_ID_ETH_OAM}
\TABLE_ROW3{\subpage object_flow "flow", BAL Flow,\ref BCMOLT_OBJ_ID_FLOW}
\TABLE_ROW3{\subpage object_gpio "gpio", GPIO control,\ref BCMOLT_OBJ_ID_GPIO}
\TABLE_ROW3{\subpage object_group "group", BAL Group,\ref BCMOLT_OBJ_ID_GROUP}
\TABLE_ROW3{\subpage object_host_log "host_log", A single host log source,\ref BCMOLT_OBJ_ID_HOST_LOG}
\TABLE_ROW3{\subpage object_host_log_file "host_log_file", Memory file generated by host system logs,\ref BCMOLT_OBJ_ID_HOST_LOG_FILE}
\TABLE_ROW3{\subpage object_inband_mgmt_channel "inband_mgmt_channel", BAL Inband Management Channel,\ref BCMOLT_OBJ_ID_INBAND_MGMT_CHANNEL}
\TABLE_ROW3{\subpage object_internal_nni "internal_nni", Internal Network-Network Interface,\ref BCMOLT_OBJ_ID_INTERNAL_NNI}
\TABLE_ROW3{\subpage object_itupon_alloc "itupon_alloc", ITU PON Alloc,\ref BCMOLT_OBJ_ID_ITUPON_ALLOC}
\TABLE_ROW3{\subpage object_itupon_gem "itupon_gem", ITU PON GEM Port,\ref BCMOLT_OBJ_ID_ITUPON_GEM}
\TABLE_ROW3{\subpage object_lag_interface "lag_interface", Link Aggregation Group,\ref BCMOLT_OBJ_ID_LAG_INTERFACE}
\TABLE_ROW3{\subpage object_log "log", A single embedded log source (usually a single task),\ref BCMOLT_OBJ_ID_LOG}
\TABLE_ROW3{\subpage object_log_file "log_file", Memory file generated by system logs,\ref BCMOLT_OBJ_ID_LOG_FILE}
\TABLE_ROW3{\subpage object_ngpon2_channel "ngpon2_channel", Channel,\ref BCMOLT_OBJ_ID_NGPON2_CHANNEL}
\TABLE_ROW3{\subpage object_nni_interface "nni_interface", nni_interface,\ref BCMOLT_OBJ_ID_NNI_INTERFACE}
\TABLE_ROW3{\subpage object_olt "olt", olt,\ref BCMOLT_OBJ_ID_OLT}
\TABLE_ROW3{\subpage object_onu "onu", ONU,\ref BCMOLT_OBJ_ID_ONU}
\TABLE_ROW3{\subpage object_pbit_to_tc "pbit_to_tc", pbit to tc,\ref BCMOLT_OBJ_ID_PBIT_TO_TC}
\TABLE_ROW3{\subpage object_policer_profile "policer_profile", Parameters needed to instantiate a policer,\ref BCMOLT_OBJ_ID_POLICER_PROFILE}
\TABLE_ROW3{\subpage object_pon_interface "pon_interface", PON Network Interface,\ref BCMOLT_OBJ_ID_PON_INTERFACE}
\TABLE_ROW3{\subpage object_protection_interface "protection_interface", Virtual interface type used to represent a redundant pair of physical interfaces,\ref BCMOLT_OBJ_ID_PROTECTION_INTERFACE}
\TABLE_ROW3{\subpage object_software_error "software_error", Software Error,\ref BCMOLT_OBJ_ID_SOFTWARE_ERROR}
\TABLE_ROW3{\subpage object_switch_inni "switch_inni", switch inni which is connected to the mac inni,\ref BCMOLT_OBJ_ID_SWITCH_INNI}
\TABLE_ROW3{\subpage object_tc_to_queue "tc_to_queue", tc to queue,\ref BCMOLT_OBJ_ID_TC_TO_QUEUE}
\TABLE_ROW3{\subpage object_tm_qmp "tm_qmp", tm_qmp,\ref BCMOLT_OBJ_ID_TM_QMP}
\TABLE_ROW3{\subpage object_tm_queue "tm_queue", Traffic Management queue,\ref BCMOLT_OBJ_ID_TM_QUEUE}
\TABLE_ROW3{\subpage object_tm_sched "tm_sched", Scheduling node,\ref BCMOLT_OBJ_ID_TM_SCHED}
</table>

@{ */

/** \page object_access_control Object: access_control - access control

\n
Object key: bcmolt_access_control_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_access_control_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_access_control_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_access_control_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_access_control_receive_eth_packet "Indication: receive_eth_packet", Received packet on this access_control rule}
\TABLE_ROW2{\subpage object_access_control_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_access_control_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_access_control_interfaces_update "Operation: interfaces_update", add\, remove or set interface reference(s) to an access_control instance}
</table>

@{ */

/** \page object_access_control_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_access_control_cfg\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum}
\TABLE_ROW6{classifier,The classifier for this access control instance,\ref bcmolt_classifier,RW, , }
\TABLE_ROW6{priority,Priority for this access control instance,uint16_t,RW,0U,0U}
\TABLE_ROW6{forwarding_action,The action associated with this access control instance,\ref bcmolt_access_control_fwd_action,RW, , }
\TABLE_ROW6{modifier_action,config for modifying packet headers for vlan tags\, dscp etc,\ref bcmolt_access_control_pkt_modifier,RW, , }
\TABLE_ROW6{state,State,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED, }
\TABLE_ROW6{statistics_control,statistics control,\ref bcmolt_control_state,RW, , }
\TABLE_ROW6{cookie,Opaque application cookie associated with this access control instance,\ref bcmolt_cookie,RW, , }
\TABLE_ROW6{interface_refs,list of associated interfaces,\ref bcmolt_intf_ref_list_u8,R, , }
\TABLE_ROW6{policer_action,policer action,\ref bcmolt_policer_action,RW, , }
</table>
\n\n */

/** \page object_access_control_stats Statistics: stats

Access Control Statistics\n

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_access_control_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{packets,pkts processed,uint64_t}
\TABLE_ROW3{bytes,bytes processed,uint64_t}
\TABLE_ROW3{policer_packets_passed_ukmb,passed pkts on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_arr_u64_4}
\TABLE_ROW3{policer_packets_dropped_ukmb,dropped pkts on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_arr_u64_4}
\TABLE_ROW3{policer_bytes_passed_ukmb,passed bytes on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_arr_u64_4}
\TABLE_ROW3{policer_bytes_dropped_ukmb,dropped bytes on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_arr_u64_4}
</table>
\n\n */

/** \page object_access_control_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_access_control_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{packets,pkts processed,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{bytes,bytes processed,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{policer_packets_passed_ukmb,passed pkts on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{policer_packets_dropped_ukmb,dropped pkts on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{policer_bytes_passed_ukmb,passed bytes on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{policer_bytes_dropped_ukmb,dropped bytes on policer by traffic type - uu\,ku\,mc\,bc,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_access_control_receive_eth_packet Indication: receive_eth_packet

Received packet on this access_control rule\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_access_control_receive_eth_packet\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{interface_ref,Interface Reference,\ref bcmolt_intf_ref}
\TABLE_ROW3{svc_port_id,GEM or LLID of received packet,\ref bcmolt_service_port_id}
\TABLE_ROW3{buffer,Buffer,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_access_control_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_access_control_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_access_control_stats_data_id}
</table>
\n\n */

/** \page object_access_control_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_access_control_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_access_control_stats_data_id}
</table>
\n\n */

/** \page object_access_control_interfaces_update Operation: interfaces_update

add, remove or set interface reference(s) to an access_control instance\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_access_control_interfaces_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{command,command,\ref bcmolt_members_update_command}
\TABLE_ROW3{interface_ref_list,interface reference,\ref bcmolt_intf_ref_list_u8}
</table>
\n\n */

/** @}  */
/** \page object_bal_system Object: bal_system - BAL System Globals

BAL System Wide Global Config record\n
Object key: bcmolt_bal_system_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_bal_system_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_bal_system_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_bal_system_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{config_state,Configuration State ,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_CONFIGURED}
\TABLE_ROW5{lag_parms,LAG Global Params,\ref bcmolt_lag_global_parms,RW, }
\TABLE_ROW5{host_port,host port,\ref bcmolt_host_port_params,RW, }
</table>
\n\n */

/** @}  */
/** \page object_device Object: device - Device

Singleton object representing the device as a whole\n
Object key: bcmolt_device_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_device_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_device_connection_complete "Indication: connection_complete", The host successfully connected to the device. The device has either been reprogrammed with new firmware\, or a connection was established with an existing device (see the "standalone" field)}
\TABLE_ROW2{\subpage object_device_connection_established "Indication: connection_established", Connection established indication used by the device control library.}
\TABLE_ROW2{\subpage object_device_connection_failure "Indication: connection_failure", The host failed to connect to the device}
\TABLE_ROW2{\subpage object_device_ddr_test_complete "Indication: ddr_test_complete", The DDR Test has completed}
\TABLE_ROW2{\subpage object_device_device_keep_alive "Indication: device_keep_alive", Keep alive message from the device to the host - used by the device control library}
\TABLE_ROW2{\subpage object_device_device_ready "Indication: device_ready", Device ready indication used by the device control library}
\TABLE_ROW2{\subpage object_device_disconnection_complete "Indication: disconnection_complete", The host successfully disconnected from the device}
\TABLE_ROW2{\subpage object_device_image_transfer_complete "Indication: image_transfer_complete", Image Transfer Complete}
\TABLE_ROW2{\subpage object_device_inni_mux_configuration_completed "Indication: inni_mux_configuration_completed", INNI mux configuration completed}
\TABLE_ROW2{\subpage object_device_sw_error "Indication: sw_error", sw error}
\TABLE_ROW2{\subpage object_device_sw_exception "Indication: sw_exception", sw exception}
\TABLE_ROW2{\subpage object_device_sw_health_check_failure "Indication: sw_health_check_failure", An embedded software module is unresponsive.}
\TABLE_ROW2{\subpage object_device_tod_calibration_done "Indication: tod_calibration_done", tod calibration done}
\TABLE_ROW2{\subpage object_device_change_inni_mux "Operation: change_inni_mux", Change INNI mux on the fly}
\TABLE_ROW2{\subpage object_device_connect "Operation: connect", Start connection process between the host processor and the device}
\TABLE_ROW2{\subpage object_device_disconnect "Operation: disconnect", Disconnect the host from the device}
\TABLE_ROW2{\subpage object_device_host_keep_alive "Operation: host_keep_alive", Keep alive message from the host to the device - used by the device control library (should not be sent by the host application)}
\TABLE_ROW2{\subpage object_device_image_transfer_data "Operation: image_transfer_data", used for transferring the actual data from/to the OLT. Not to be directly called by the user}
\TABLE_ROW2{\subpage object_device_image_transfer_start "Operation: image_transfer_start", This API message informs the OLT of the start of image transfer\, and provides the information of the file image}
\TABLE_ROW2{\subpage object_device_reset "Operation: reset", Resets the host/device}
\TABLE_ROW2{\subpage object_device_run_ddr_test "Operation: run_ddr_test", Run a test on one or more of the DDR components}
\TABLE_ROW2{\subpage object_device_set_8021_as_tod_string "Operation: set_8021_as_tod_string", Operation to program the ToD string - alternative to capturing the ToD string from the secondary UART}
\TABLE_ROW2{\subpage object_device_sw_upgrade_activate "Operation: sw_upgrade_activate", SW image activation for In-Service SW upgrade}
</table>

@{ */

/** \page object_device_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_device_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{system_mode,System mode - this must be set by the host when initially provisioning the system.  Setting this also sets the "nni_speed" property\, unless it is overridden.,\ref bcmolt_system_mode,R, , , }
\TABLE_ROW7{keepalive_interval,Keepalive Interval in Seconds  (0 = Disable),uint32_t,RW,5UL, ,15UL}
\TABLE_ROW7{keepalive_tolerance,How many keepalive messages can be lost before triggering a disconnect sequence ,uint32_t,RW,3UL, ,5UL}
\TABLE_ROW7{firmware_sw_version,Firmware SW Version,\ref bcmolt_firmware_sw_version,R, , , }
\TABLE_ROW7{chip_family,Chip family,\ref bcmolt_chip_family,R,BCMOLT_CHIP_FAMILY_UNKNOWN, , }
\TABLE_ROW7{chip_id,Chip Id,uint32_t,R, , , }
\TABLE_ROW7{chip_revision,Revision of the BCM68620 device.,\ref bcmolt_device_chip_revision,R, , , }
\TABLE_ROW7{chip_voltage,Chip voltage in mV,uint32_t,R, , , }
\TABLE_ROW7{chip_temperature,Current die temperature.,int32_t,R, , , }
\TABLE_ROW7{protection_switching_ext_irq,The selected external IRQ for protection switching,\ref bcmolt_ext_irq,RW,BCMOLT_EXT_IRQ_UNCONFIGURED, , }
\TABLE_ROW7{indication_shaping,Shaping / rate limiting for the indication channel.,\ref bcmolt_indication_shaping,RW, , , }
\TABLE_ROW7{tod_uart_baudrate,UART baud rate,\ref bcmolt_uart_baudrate,RW,BCMOLT_UART_BAUDRATE_UART_RATE_9600, , }
\TABLE_ROW7{itu_tod,ITU ToD configuration,\ref bcmolt_itu_tod,RW, , , }
\TABLE_ROW7{ieee_8021_as_tod,802.1AS (IEEE) ToD configuration,\ref bcmolt_ieee_8021_as_tod,RW, , , }
\TABLE_ROW7{embedded_image_list,List of all file images stored in the OLT.,\ref bcmolt_embedded_image_entry_list_u8_max_4,R, , , }
\TABLE_ROW7{wd_enable,In PCIe out of band management\, this field is ignored.,bcmos_bool,RW,BCMOS_TRUE, , }
\TABLE_ROW7{wd_ip_traffic_timeout,The units are seconds.,uint16_t,RW,300U,5U,65535U}
\TABLE_ROW7{comm_mode,The communication mode being used.,\ref bcmolt_comm_mode,R, , , }
\TABLE_ROW7{pcie_conn_data,Mirror of the PCIe connection parameters supplied in the initial connect operation.,\ref bcmolt_pcie_conn_data,R, , , }
\TABLE_ROW7{itu_multipon_dba_enable,Enable Multi-PON DBA feature in ITU modes,bcmos_bool,R,BCMOS_FALSE, , }
\TABLE_ROW7{itu_low_latency_dba_enable,Enable low latency DBA feature in ITU modes,bcmos_bool,R,BCMOS_FALSE, , }
\TABLE_ROW7{logger_enable,Set to false to disable all logging in the system,bcmos_bool,RW,BCMOS_TRUE, , }
\TABLE_ROW7{inni_config,INNI configuration,\ref bcmolt_inni_config,R, , , }
\TABLE_ROW7{ras_ddr_mode,RAS DDR Mode,\ref bcmolt_ras_ddr_usage_mode,RW, , , }
\TABLE_ROW7{itu_enable_inni_mux,Enable INNI mux configuration on the fly,bcmos_bool,R,BCMOS_FALSE, , }
\TABLE_ROW7{trap_gpon_ploam,Trap gpon ploams according to ploam id,\ref bcmolt_arr_ploam_filter_5,RW, , , }
\TABLE_ROW7{trap_xgpon_ploam,Trap xgpon ploams according to ploam id,\ref bcmolt_arr_ploam_filter_5,RW, , , }
\TABLE_ROW7{inband_conn_data,Mirror of the in-band connection parameters supplied in the initial connect operation.,\ref bcmolt_inband_conn_data,R, , , }
\TABLE_ROW7{inband_internal_nni,Port number of the internal NNI port that is configured for in-band communication.,\ref bcmolt_pon_ni,RW,255, , }
</table>
\n\n */

/** \page object_device_connection_complete Indication: connection_complete

The host successfully connected to the device. The device has either been reprogrammed with new firmware, or a connection was established with an existing device (see the "standalone" field)\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_connection_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{standalone,If true\, the device was previously running in standalone mode before this connection was established. If false\, the device was booted from reset with new firmware\, etc.,bcmos_bool}
\TABLE_ROW3{system_mode,System Mode,\ref bcmolt_system_mode}
</table>
\n\n */

/** \page object_device_connection_established Indication: connection_established

Connection established indication used by the device control library.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_connection_established\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_device_connection_failure Indication: connection_failure

The host failed to connect to the device\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_connection_failure\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{reason,Connection fail reason,\ref bcmolt_host_connection_fail_reason}
\TABLE_ROW3{device_in_reset,Whether or not the device was left in reset,bcmos_bool}
\TABLE_ROW3{error_text,Error string associated with the failure response.,\ref bcmolt_str_256}
</table>
\n\n */

/** \page object_device_ddr_test_complete Indication: ddr_test_complete

The DDR Test has completed\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_ddr_test_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ddr_test,Results of the DDR Test,\ref bcmolt_ddr_test_completed}
</table>
\n\n */

/** \page object_device_device_keep_alive Indication: device_keep_alive

Keep alive message from the device to the host - used by the device control library\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_device_keep_alive\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{sequence_number,sequence number,uint32_t}
\TABLE_ROW3{time_stamp,time stamp,uint32_t}
\TABLE_ROW3{keepalive_interval,Keepalive Interval,uint32_t}
\TABLE_ROW3{keepalive_tolerance,Keepalive Tolerance,uint32_t}
</table>
\n\n */

/** \page object_device_device_ready Indication: device_ready

Device ready indication used by the device control library\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_device_ready\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Default,Maximum}
\TABLE_ROW5{firmware_sw_version,Software Version,\ref bcmolt_firmware_sw_version, , }
\TABLE_ROW5{system_mode,System Mode,\ref bcmolt_system_mode, , }
\TABLE_ROW5{keepalive_interval,Keepalive Interval in Seconds (0 = Disable),uint32_t,5UL,15UL}
\TABLE_ROW5{keepalive_tolerance,How many keepalive messages can be lost before triggering a disconnect sequence,uint32_t,3UL, }
\TABLE_ROW5{standalone,Standalone,bcmos_bool, , }
\TABLE_ROW5{chip_family,Chip Family,\ref bcmolt_chip_family, , }
</table>
\n\n */

/** \page object_device_disconnection_complete Indication: disconnection_complete

The host successfully disconnected from the device\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_disconnection_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{reason,Device disconnect reason,\ref bcmolt_device_disconnect_reason}
</table>
\n\n */

/** \page object_device_image_transfer_complete Indication: image_transfer_complete

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_image_transfer_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{image_type,Image type.,\ref bcmolt_device_image_type}
\TABLE_ROW3{block_number,Block number.,uint32_t}
\TABLE_ROW3{status,Image transfer status.,\ref bcmolt_image_transfer_status}
</table>
\n\n */

/** \page object_device_inni_mux_configuration_completed Indication: inni_mux_configuration_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_inni_mux_configuration_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_mux,new_mux,\ref bcmolt_inni_mux}
\TABLE_ROW3{status,status,\ref bcmolt_result}
</table>
\n\n */

/** \page object_device_sw_error Indication: sw_error

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_sw_error\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{task_name,task name,\ref bcmolt_str_100}
\TABLE_ROW3{file_name,file name,\ref bcmolt_str_100}
\TABLE_ROW3{line_number,line number,uint32_t}
\TABLE_ROW3{pon_ni,pon_ni,uint8_t}
</table>
\n\n */

/** \page object_device_sw_exception Indication: sw_exception

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_sw_exception\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{cpu_id,CPU ID,uint8_t}
\TABLE_ROW3{text,text,\ref bcmolt_str_2000}
</table>
\n\n */

/** \page object_device_sw_health_check_failure Indication: sw_health_check_failure

An embedded software module is unresponsive.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_sw_health_check_failure\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{module_name,Name of the unresponsive module.,\ref bcmolt_str_100, }
\TABLE_ROW4{module_id,The module ID of the unresponsive module.,uint16_t, }
\TABLE_ROW4{status,status,\ref bcmolt_status,BCMOLT_STATUS_OFF}
</table>
\n\n */

/** \page object_device_tod_calibration_done Indication: tod_calibration_done

tod calibration done\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_device_tod_calibration_done\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{pon_ni,pon_ni,uint8_t}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_tod_calibration_fail_reason}
</table>
\n\n */

/** \page object_device_change_inni_mux Operation: change_inni_mux

Change INNI mux on the fly\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_change_inni_mux\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{mux,mux,\ref bcmolt_inni_mux}
\TABLE_ROW3{nni_connection,nni_connection,\ref bcmolt_nni_connection}
</table>
\n\n */

/** \page object_device_connect Operation: connect

Start connection process between the host processor and the device\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_connect\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{system_mode,System Mode,\ref bcmolt_system_mode, }
\TABLE_ROW4{comm_mode,Communication Mode. AKA Management Mode,\ref bcmolt_comm_mode,BCMOLT_COMM_MODE_PCIE}
\TABLE_ROW4{pcie_conn_data,If PCIe communications mode is selected\, these parameters may be set.,\ref bcmolt_pcie_conn_data, }
\TABLE_ROW4{inband_conn_data,If InBand Communication mode is selected\, these parameters must be set.,\ref bcmolt_inband_conn_data, }
\TABLE_ROW4{itu_multipon_dba_enable,Enable Multi-PON DBA feature in ITU modes,bcmos_bool,BCMOS_FALSE}
\TABLE_ROW4{inni_config,INNI configuration,\ref bcmolt_inni_config, }
\TABLE_ROW4{ras_ddr_mode,If ITU PON system is used\, this parameter states RAS DDR usage mode. For EPON system modes should be set to no_ddr value.,\ref bcmolt_ras_ddr_usage_mode,BCMOLT_RAS_DDR_USAGE_MODE_FOUR_DDRS}
\TABLE_ROW4{ddr_test_mode,DDR test mode,\ref bcmolt_ddr_test_mode,BCMOLT_DDR_TEST_MODE_NO_TEST}
\TABLE_ROW4{itu_change_inni_mux_enable,Enable changing INNI mux on the fly,bcmos_bool,BCMOS_FALSE}
\TABLE_ROW4{itu_low_latency_dba_enable,Enable low latency DBA feature in ITU modes,bcmos_bool,BCMOS_FALSE}
\TABLE_ROW4{debug_uart_port_swap,Optional paramter. Default value is false. Set to true to use UART1 for logs/CLI\, UART0 for TOD,bcmos_bool,BCMOS_FALSE}
</table>
\n\n */

/** \page object_device_disconnect Operation: disconnect

Disconnect the host from the device\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_disconnect\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_device_host_keep_alive Operation: host_keep_alive

Keep alive message from the host to the device - used by the device control library (should not be sent by the host application)\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_host_keep_alive\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{sequence_number,sequence number,uint32_t}
\TABLE_ROW3{time_stamp,time stamp,uint32_t}
</table>
\n\n */

/** \page object_device_image_transfer_data Operation: image_transfer_data

used for transferring the actual data from/to the OLT. Not to be directly called by the user\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_image_transfer_data\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{block_number,Block number.,uint32_t}
\TABLE_ROW3{more_data,Specifies that there are more data to come,bcmos_bool}
\TABLE_ROW3{data,Data.,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_device_image_transfer_start Operation: image_transfer_start

This API message informs the OLT of the start of image transfer, and provides the information of the file image\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_image_transfer_start\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{image_type,File type.,\ref bcmolt_device_image_type}
\TABLE_ROW3{image_size,Size of the file image. Ignored for RRQ operation,uint32_t}
\TABLE_ROW3{crc32,CRC32 checksum of the entire file image,uint32_t}
\TABLE_ROW3{image_name,Name of the file image. Null-terminated string. This is required for the DPoE ONU only.  DPoE requires the write request OAM contains the name of the file,\ref bcmolt_str_64}
</table>
\n\n */

/** \page object_device_reset Operation: reset

Resets the host/device\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_reset\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_device_run_ddr_test Operation: run_ddr_test

Run a test on one or more of the DDR components\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_run_ddr_test\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{cpu,Whether or not to test the CPU DDR,bcmos_bool}
\TABLE_ROW3{ras_0,Whether or not to test RAS 0 DDR,bcmos_bool}
\TABLE_ROW3{ras_1,Whether or not to test RAS 1 DDR,bcmos_bool}
</table>
\n\n */

/** \page object_device_set_8021_as_tod_string Operation: set_8021_as_tod_string

Operation to program the ToD string - alternative to capturing the ToD string from the secondary UART\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_set_8021_as_tod_string\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{tod_string,The current ToD string to be used for clock transport (EPON only),\ref bcmolt_str_256}
</table>
\n\n */

/** \page object_device_sw_upgrade_activate Operation: sw_upgrade_activate

SW image activation for In-Service SW upgrade\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_device_sw_upgrade_activate\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** @}  */
/** \page object_erps_interface Object: erps_interface - ERPS Interface

G.8032 Ethernet Ring Protection Switching ERPS\n
Object key: bcmolt_erps_interface_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_erps_interface_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_erps_interface_port_update_complete "Indication: port_update_complete", Erps port update Complete}
\TABLE_ROW2{\subpage object_erps_interface_ring_port_control "Indication: ring_port_control", Ring Port Control}
\TABLE_ROW2{\subpage object_erps_interface_port_update "Operation: port_update", Add or remove a port from an erps object}
\TABLE_ROW2{\subpage object_erps_interface_set_ring_port_control "Operation: set_ring_port_control", Set BLOCK/UNBLOCK/FLUSH on a ring port}
</table>

@{ */

/** \page object_erps_interface_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_erps_interface_cfg\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Access,Default,Maximum}
\TABLE_ROW6{state,state,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED, }
\TABLE_ROW6{east_port,NNI or LAG interface Reference,\ref bcmolt_intf_ref,RW, , }
\TABLE_ROW6{west_port,NNI or LAG interface Reference and Id,\ref bcmolt_intf_ref,RW, , }
\TABLE_ROW6{control_vlan_id,Optional VLAN ID that carrys ERPS R-APS packets on the ring.,\ref bcmolt_vlan_id,RW,65535U,4094U}
\TABLE_ROW6{east_port_state,East Port State,\ref bcmolt_ring_port_state,R, , }
\TABLE_ROW6{west_port_state,West Port State,\ref bcmolt_ring_port_state,R, , }
\TABLE_ROW6{sub_port_list,List of provisioned sub_ports on this erps interface,\ref bcmolt_arr_intf_ref_16,R, , }
</table>
\n\n */

/** \page object_erps_interface_port_update_complete Indication: port_update_complete

Erps port update Complete\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_erps_interface_port_update_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{command,Command just executed,\ref bcmolt_port_command}
\TABLE_ROW3{port,ERPS Port just updated,\ref bcmolt_erps_port}
\TABLE_ROW3{intf_ref,Modified Port,\ref bcmolt_intf_ref}
\TABLE_ROW3{result,Result of command pass/fail,\ref bcmolt_result}
</table>
\n\n */

/** \page object_erps_interface_ring_port_control Indication: ring_port_control

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_erps_interface_ring_port_control\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{port_id,port id,\ref bcmolt_ring_port}
\TABLE_ROW3{command,Reflects current state of the requested Port,\ref bcmolt_erps_control}
\TABLE_ROW3{port_state,Port State,\ref bcmolt_ring_port_state}
\TABLE_ROW3{result,Result of operation\, success or fail. If fail then the ind.hdr.hdr.err will contain the return code.,\ref bcmolt_result}
</table>
\n\n */

/** \page object_erps_interface_port_update Operation: port_update

Add or remove a port from an erps object\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_erps_interface_port_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{command,Update an ERPS port,\ref bcmolt_port_command}
\TABLE_ROW3{port,Port to add or remove,\ref bcmolt_erps_port}
\TABLE_ROW3{intf_ref,Port interface Reference,\ref bcmolt_intf_ref}
</table>
\n\n */

/** \page object_erps_interface_set_ring_port_control Operation: set_ring_port_control

Set BLOCK/UNBLOCK/FLUSH on a ring port\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_erps_interface_set_ring_port_control\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{command,command,\ref bcmolt_erps_control}
\TABLE_ROW3{port,port,\ref bcmolt_ring_port}
</table>
\n\n */

/** @}  */
/** \page object_eth_oam Object: eth_oam - Ethernet OAM

Container to provision OAMP for Ethernet OAM features. \n
Object key: bcmolt_eth_oam_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_eth_oam_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_eth_oam_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_eth_oam_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_eth_oam_ccm_event "Indication: ccm_event", Continuity Failure Monitor CCM Events}
\TABLE_ROW2{\subpage object_eth_oam_state_change "Indication: state_change", Result of Set MEP COntrol State Operation}
\TABLE_ROW2{\subpage object_eth_oam_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_eth_oam_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_eth_oam_set_mep_state "Operation: set_mep_state", Set the control state (enable/disable)of the local or remote endpoint}
</table>

@{ */

/** \page object_eth_oam_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_eth_oam_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{state,Config State,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED, , }
\TABLE_ROW7{intf_ref,NNI port # ,\ref bcmolt_intf_ref,RW, , , }
\TABLE_ROW7{local_mep,Tx MEP config,\ref bcmolt_local_mep,RW, , , }
\TABLE_ROW7{remote_mep,Rx MEP config,\ref bcmolt_remote_mep,RW, , , }
\TABLE_ROW7{meg,Maintenance Entity Group config,\ref bcmolt_meg_cfg,RW, , , }
\TABLE_ROW7{source_mac,Source Mac - for Tx CCMs,bcmos_mac_address,RW,010203040506, , }
\TABLE_ROW7{dest_mac,Dest Mac - for Rx and Tx CCMs.,bcmos_mac_address,RW,0180C2000030, , }
\TABLE_ROW7{pkt_tag_type,Number of vlan tags in packet\, double or single tagged. ,\ref bcmolt_pkt_tag_type,RW,BCMOLT_PKT_TAG_TYPE_SINGLE_TAG, , }
\TABLE_ROW7{o_vid,Outer VLAN ID. ,\ref bcmolt_vlan_id,RW,0U, ,4094U}
\TABLE_ROW7{o_pbits,Outer VLAN Pbits. ,uint8_t,RW,7,0,7}
\TABLE_ROW7{o_tpid,Outer VLAN TPID. ,uint16_t,RW,0x1FA4, , }
\TABLE_ROW7{i_vid,Inner VLAN ID\, only if pkt_tag_type is double.,\ref bcmolt_vlan_id,RW,0U, ,4094U}
\TABLE_ROW7{i_pbits,Inner VLAN Pbits\, only if pkt_tag_type is double.,uint8_t,RW,0,0,7}
\TABLE_ROW7{i_tpid,Inner VLAN TPID\, only if pkt_tag_type is double.,uint16_t,RW,0U, , }
</table>
\n\n */

/** \page object_eth_oam_stats Statistics: stats

Count of CCM packets tx/rx in OAMP\n

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_eth_oam_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ccm_tx_count,CCM Tx Count,uint64_t}
\TABLE_ROW3{ccm_rx_count,CCM Rx Count,uint64_t}
</table>
\n\n */

/** \page object_eth_oam_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_eth_oam_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ccm_tx_count,CCM Tx Count,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{ccm_rx_count,CCM Rx Count,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_eth_oam_ccm_event Indication: ccm_event

Continuity Failure Monitor CCM Events\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_eth_oam_ccm_event\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{event,Received CCM Event,\ref bcmolt_ccm_event}
</table>
\n\n */

/** \page object_eth_oam_state_change Indication: state_change

Result of Set MEP COntrol State Operation\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_eth_oam_state_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,Command Result,\ref bcmolt_result}
\TABLE_ROW3{old_state,Old State,\ref bcmolt_control_state}
\TABLE_ROW3{new_state,New State,\ref bcmolt_control_state}
</table>
\n\n */

/** \page object_eth_oam_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_eth_oam_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_eth_oam_stats_data_id}
</table>
\n\n */

/** \page object_eth_oam_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_eth_oam_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_eth_oam_stats_data_id}
</table>
\n\n */

/** \page object_eth_oam_set_mep_state Operation: set_mep_state

Set the control state (enable/disable)of the local or remote endpoint\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_eth_oam_set_mep_state\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{type,MEP Type,\ref bcmolt_mep_type,BCMOLT_MEP_TYPE_MEP}
\TABLE_ROW4{state,MEP Control State,\ref bcmolt_control_state,BCMOLT_CONTROL_STATE_ENABLE}
</table>
\n\n */

/** @}  */
/** \page object_flow Object: flow - BAL Flow

\n
Object key: bcmolt_flow_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_flow_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_flow_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_flow_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_flow_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_flow_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_flow_send_eth_packet "Operation: send_eth_packet", Sends ethernet packet using this flow}
</table>

@{ */

/** \page object_flow_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_flow_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{ingress_intf,The ingress tip of the flow ,\ref bcmolt_flow_intf_ref,RW, , , }
\TABLE_ROW7{egress_intf,The engress tip of the flow ,\ref bcmolt_flow_intf_ref,RW, , , }
\TABLE_ROW7{onu_id,The ID of the ONU assigned to this flow,\ref bcmolt_onu_id,RW,65535U, , }
\TABLE_ROW7{svc_port_id,The ID of the service port (for GPON/XGPON - GEM ID),\ref bcmolt_service_port_id,RW,65535UL, , }
\TABLE_ROW7{classifier,The classifier for this flow,\ref bcmolt_classifier,RW, , , }
\TABLE_ROW7{priority,Priority for this flow in case of multiple match.,uint16_t,RW,10U,0U,65535U}
\TABLE_ROW7{action,The action associated with the flow,\ref bcmolt_action,RW, , , }
\TABLE_ROW7{group_id,RW - The multicast group associated with this flow\, valid for type MULTICAST only,\ref bcmolt_group_id,RW,65535U, , }
\TABLE_ROW7{egress_qos,Egress qos,\ref bcmolt_egress_qos,RW, , , }
\TABLE_ROW7{state,Flow State,\ref bcmolt_flow_state,RW,BCMOLT_FLOW_STATE_NOT_CONFIGURED, , }
\TABLE_ROW7{local_switching,Utilize Pon to Pon local switching (US Flows Only)\, enable=Allow / disable=Do not allow (default). ,\ref bcmolt_control_state,RW,BCMOLT_CONTROL_STATE_DISABLE, , }
\TABLE_ROW7{statistics,enable/disable flow statistics,\ref bcmolt_control_state,RW,BCMOLT_CONTROL_STATE_DISABLE, , }
\TABLE_ROW7{cookie,Opaque application cookie associated with the flow (not interpreted by Maple),\ref bcmolt_cookie,RW, , , }
\TABLE_ROW7{mac_table_miss_action,Action to take a mac table miss,\ref bcmolt_mac_table_miss_action,RW,BCMOLT_MAC_TABLE_MISS_ACTION_FLOOD, , }
\TABLE_ROW7{policer_profile,policer profile for flow if any,\ref bcmolt_policer_profile_id,RW,65535U, , }
</table>
\n\n */

/** \page object_flow_stats Statistics: stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_flow_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_packets,Received packets,uint64_t}
\TABLE_ROW3{rx_bytes,Received bytes,uint64_t}
\TABLE_ROW3{tx_packets,Transmitted packets,uint64_t}
\TABLE_ROW3{tx_bytes,Transmitted bytes,uint64_t}
</table>
\n\n */

/** \page object_flow_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_flow_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_packets,Received packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bytes,Received bytes,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,Transmitted packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,Transmitted bytes,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_flow_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_flow_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_flow_stats_data_id}
</table>
\n\n */

/** \page object_flow_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_flow_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_flow_stats_data_id}
</table>
\n\n */

/** \page object_flow_send_eth_packet Operation: send_eth_packet

Sends ethernet packet using this flow\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_flow_send_eth_packet\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{buffer,Buffer containing frame to be sent (includes L2 header),\ref bcmolt_bin_str, }
\TABLE_ROW4{inject_type,Location to inject frame (Egress Port or Ingress Port).,\ref bcmolt_inject_type,BCMOLT_INJECT_TYPE_INJECT_AT_EGRESS}
\TABLE_ROW4{ingress_intf,Ingress Interface. Used with inject_type==ingress for Flow with Ingress==Host.,\ref bcmolt_flow_intf_ref, }
\TABLE_ROW4{svc_port_id,Service Port Id. Used with inject_type==ingress for Flow with Ingress==Host.,\ref bcmolt_service_port_id,65535UL}
</table>
\n\n */

/** @}  */
/** \page object_gpio Object: gpio - GPIO

GPIO control\n
Object key: bcmolt_gpio_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_gpio_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_gpio_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_gpio_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{direction,GPIO PIN direction (input or output),\ref bcmolt_gpio_pin_dir,RW}
\TABLE_ROW4{value,Value to write.,\ref bcmolt_gpio_value,RW}
</table>
\n\n */

/** @}  */
/** \page object_group Object: group - BAL Group

\n
Object key: bcmolt_group_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_group_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_group_complete_members_update "Indication: complete_members_update", members update complete indication}
\TABLE_ROW2{\subpage object_group_members_update "Operation: members_update", update the group members list}
</table>

@{ */

/** \page object_group_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_group_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{members,The list of members associated with this group\, updated using operations,\ref bcmolt_group_member_info_list_u8,R, }
\TABLE_ROW5{cookie,Application cookie,\ref bcmolt_cookie,RW, }
\TABLE_ROW5{type,Configured Group Type is Mulicast or Nto1,\ref bcmolt_group_type,RW,BCMOLT_GROUP_TYPE_NONE}
\TABLE_ROW5{state,group state,\ref bcmolt_group_state,R,BCMOLT_GROUP_STATE_NOT_CONFIGURED}
\TABLE_ROW5{action,allowed vlan actions,\ref bcmolt_action,RW, }
</table>
\n\n */

/** \page object_group_complete_members_update Indication: complete_members_update

members update complete indication\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_group_complete_members_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_group_member_update_fail_reason}
</table>
\n\n */

/** \page object_group_members_update Operation: members_update

update the group members list\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_group_members_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{members_cmd,members_cmd,\ref bcmolt_group_members_update_command}
</table>
\n\n */

/** @}  */
/** \page object_host_log Object: host_log - host log

A single host log source\n
Object key: bcmolt_host_log_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_host_log_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_host_log_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_host_log_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{type,Log type,\ref bcmolt_log_type,RW}
\TABLE_ROW4{style,Log style,\ref bcmolt_log_style,RW}
\TABLE_ROW4{level,Log levels for each file,\ref bcmolt_log_level_per_file,RW}
\TABLE_ROW4{msg_count,Number of messages per log level,\ref bcmolt_log_level_msg_count,R}
\TABLE_ROW4{lost_msg_count,Number of messages lost/dropped,uint32_t,R}
</table>
\n\n */

/** @}  */
/** \page object_host_log_file Object: host_log_file - Host Log File

Memory file generated by host system logs\n
Object key: bcmolt_host_log_file_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_host_log_file_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_host_log_file_clear "Operation: clear", Clear the log file}
\TABLE_ROW2{\subpage object_host_log_file_reset_buffer_ptr "Operation: reset_buffer_ptr", Reset the position of the buffer read pointer so the "buffer" cfg parameter will return the first section of the file}
</table>

@{ */

/** \page object_host_log_file_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_host_log_file_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{wrap_around,Log file wrap-around option. TRUE=wrap around when full. FALSE=stop when full,bcmos_bool,RW,BCMOS_TRUE}
\TABLE_ROW5{clear_after_read,Clear log after last record has been read,bcmos_bool,RW,BCMOS_FALSE}
\TABLE_ROW5{msg_count,Number of messages currently in the log,uint32_t,R, }
\TABLE_ROW5{msgs_read,Number of messages already read,uint32_t,R, }
\TABLE_ROW5{msgs_remaining,Number of unread messages remaining in the log file,uint32_t,R, }
\TABLE_ROW5{buffer,Contains a section of the log buffer\, one message per line. Reading this field causes it to move to the next section.,\ref bcmolt_str_2048,R, }
</table>
\n\n */

/** \page object_host_log_file_clear Operation: clear

Clear the log file\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_host_log_file_clear\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_host_log_file_reset_buffer_ptr Operation: reset_buffer_ptr

Reset the position of the buffer read pointer so the "buffer" cfg parameter will return the first section of the file\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_host_log_file_reset_buffer_ptr\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** @}  */
/** \page object_inband_mgmt_channel Object: inband_mgmt_channel - BAL Inband Management Channel

\n
Object key: bcmolt_inband_mgmt_channel_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_inband_mgmt_channel_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_inband_mgmt_channel_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_inband_mgmt_channel_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{nni_intf,The NNI interface Id,\ref bcmolt_flow_intf_ref,RW, }
\TABLE_ROW5{policer_profile,policer_profile,\ref bcmolt_policer_profile_id,RW,65535U}
\TABLE_ROW5{nic_intf_id,The logical port from Topology file\, facing the NIC card on host,\ref bcmolt_interface_id,RW, }
\TABLE_ROW5{vlan_id,The classifier for this inband mgmt flow. Vid is always an Outer Vid,uint16_t,RW, }
\TABLE_ROW5{nic_card_mac,NIC card MAC address,bcmos_mac_address,RW, }
\TABLE_ROW5{action,The action associated with the inband flow,\ref bcmolt_inband_mgmt_action_type,RW, }
\TABLE_ROW5{state,Inband Mgmt State,\ref bcmolt_inband_mgmt_state,R,BCMOLT_INBAND_MGMT_STATE_NOT_CONFIGURED}
</table>
\n\n */

/** @}  */
/** \page object_internal_nni Object: internal_nni - Internal NNI

Internal Network-Network Interface\n
Object key: bcmolt_internal_nni_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_internal_nni_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_internal_nni_enet_stats "Statistics: enet_stats", Object statistics}
\TABLE_ROW2{\subpage object_internal_nni_nni_stats "Statistics: nni_stats", Object statistics}
\TABLE_ROW2{\subpage object_internal_nni_enet_stats_cfg "StatisticsConfig: enet_stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_internal_nni_nni_stats_cfg "StatisticsConfig: nni_stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_internal_nni_enet_stats_alarm_cleared "Indication: enet_stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_internal_nni_enet_stats_alarm_raised "Indication: enet_stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_internal_nni_nni_stats_alarm_cleared "Indication: nni_stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_internal_nni_nni_stats_alarm_raised "Indication: nni_stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_internal_nni_packet_captured "Indication: packet_captured", A packet was trapped via the trap_config rules on this interface.}
\TABLE_ROW2{\subpage object_internal_nni_status_changed "Indication: status_changed", NNI Link status changed}
\TABLE_ROW2{\subpage object_internal_nni_swap_completed "Indication: swap_completed", intetrnal inni sawp completed}
\TABLE_ROW2{\subpage object_internal_nni_send_eth_packet "Operation: send_eth_packet", Sends ethernet packet using this flow}
</table>

@{ */

/** \page object_internal_nni_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_internal_nni_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{mac_address,Mac address to be used for this NNI.,bcmos_mac_address,RW, , , }
\TABLE_ROW7{active_nni,Which NNI is currently active.,\ref bcmolt_nni_connection,RW,BCMOLT_NNI_CONNECTION_PRIMARY, , }
\TABLE_ROW7{status,NNI status,\ref bcmolt_nni_link_status,R, , , }
\TABLE_ROW7{backup_status,Status of the backup NNI.,\ref bcmolt_nni_link_status,R, , , }
\TABLE_ROW7{loopback_type,Loopback direction\, line\, remote or none,\ref bcmolt_nni_loopback_type,RW,BCMOLT_NNI_LOOPBACK_TYPE_NONE, , }
\TABLE_ROW7{status_polling_interval_ms,How often to check the status of the primary and backup NNIs (units: ms). Zero (0) disables status polling.,uint32_t,RW,50UL,0UL,3600000UL}
\TABLE_ROW7{redundancy,Should firmware automatically switch between primary/backup NNIs when Loss of Link is detected?,\ref bcmolt_internal_nni_redundancy,RW,BCMOLT_INTERNAL_NNI_REDUNDANCY_NONE, , }
\TABLE_ROW7{flow_control,NNI Flow control.,\ref bcmolt_control_state,RW,BCMOLT_CONTROL_STATE_ENABLE, , }
\TABLE_ROW7{inband_mgmt,Inband management configuration.,\ref bcmolt_inband_config_data,RW,enable, , }
\TABLE_ROW7{trap_config,Rules for packet trapping on this interface,\ref bcmolt_trap_config,RW, , , }
\TABLE_ROW7{oversubscription,If true\, this INNI is potentially oversubscribed and has enabled additonal buffering to mitigate traffic loss.,bcmos_bool,R,BCMOS_FALSE, , }
\TABLE_ROW7{prbs_generator,PRBS Generator,\ref bcmolt_prbs_generator_config,RW, , , }
\TABLE_ROW7{prbs_checker,PRBS Checker,\ref bcmolt_prbs_checker_config,RW, , , }
\TABLE_ROW7{prbs_status,PRBS Status,\ref bcmolt_prbs_status,R, , , }
\TABLE_ROW7{nni_swap_delay_us,It is used in NNI redundancy swap ,uint32_t,RW,320UL,0UL,300000UL}
</table>
\n\n */

/** \page object_internal_nni_enet_stats Statistics: enet_stats

Ethernet TX/RX RMON Counters\n

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_internal_nni_enet_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,The number of bytes received.,uint64_t}
\TABLE_ROW3{rx_frames,The number of frames received.,uint64_t}
\TABLE_ROW3{rx_frames_64,The number of 64 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_65_127,The number of 65 to 127 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_128_255,The number of 128 to 255 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_256_511,The number of 256 to 511 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_512_1023,The number of 512 to 1023 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_1024_1518,The number of 1024 to 1518 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_1519_2047,The number of 1519 to 2047 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_2048_4095,The number of 2048 to 4095 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_4096_9216,The number of 4096 to 9216 byte frames received.,uint64_t}
\TABLE_ROW3{rx_frames_9217_16383,The number of 9217 to 16383 byte frames received.,uint64_t}
\TABLE_ROW3{rx_broadcast_frames,The number of broadcast frames received.,uint64_t}
\TABLE_ROW3{rx_data_bytes,The number of data bytes received.,uint64_t}
\TABLE_ROW3{rx_multicast_frames,The number of multicast frames received.,uint64_t}
\TABLE_ROW3{rx_unicast_frames,The number of unicast frames received.,uint64_t}
\TABLE_ROW3{rx_abort_frames,The number of abort frames received.,uint64_t}
\TABLE_ROW3{rx_fcs_error,The number of bad FCS errors received.,uint64_t}
\TABLE_ROW3{rx_oversize_error,The number of oversize errors received.,uint64_t}
\TABLE_ROW3{rx_runt_error,The number of runt errors received.,uint64_t}
\TABLE_ROW3{tx_bytes,The number of bytes transmitted.,uint64_t}
\TABLE_ROW3{tx_frames,The number of frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_64,The number of 64 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_65_127,The number of 65 to 127 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_128_255,The number of 128 to 255 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_256_511,The number of 256 to 511 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_512_1023,The number of 512 to 1023 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_1024_1518,The number of 1024 to 1518 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_1519_2047,The number of 1519 to 2047 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_2048_4095,The number of 2048 to 4095 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_4096_9216,The number of 4096 to 9216 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_frames_9217_16383,The number of 9217 to 16383 byte frames transmitted.,uint64_t}
\TABLE_ROW3{tx_broadcast_frames,The number of broadcast frames transmitted.,uint64_t}
\TABLE_ROW3{tx_data_bytes,The number of data bytes transmitted.,uint64_t}
\TABLE_ROW3{tx_multicast_frames,The number of multicast frames transmitted.,uint64_t}
\TABLE_ROW3{tx_unicast_frames,The number of unicast frames transmitted.,uint64_t}
\TABLE_ROW3{tx_abort_frames,The number of abort frames transmitted.,uint64_t}
\TABLE_ROW3{tx_fcs_error,The number of transmitted FCS errors on this NNI.,uint64_t}
</table>
\n\n */

/** \page object_internal_nni_nni_stats Statistics: nni_stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_internal_nni_nni_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_good_frames,The number of received good frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_control_frames,The number of received control frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_pause_frames,The number of received pause frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_pfc_frames,The number of received PFC frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_unsupported_opcode,The number of received Unsupported Opcode frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_unsupported_da,The number of received unsupported DA frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_alignment_errors,The number of received alignment errors on this NNI.,uint64_t}
\TABLE_ROW3{rx_length_out_of_range,The number of received length out of range errors on this NNI.,uint64_t}
\TABLE_ROW3{rx_code_errors,The number of received code errors on this NNI.,uint64_t}
\TABLE_ROW3{rx_jabber_frames,The number of received jabber frames on this NNI. these are oversized frames that also contain an invalid CRC\, code error\, or IEEE length check error.,uint64_t}
\TABLE_ROW3{rx_mtu_check_errors,The number of received MTU Check Errors on this NNI.,uint64_t}
\TABLE_ROW3{rx_promiscuous_frames,The number of received frames on this NNI that are not control packets and have a DA that is not matching with the RX SA.,uint64_t}
\TABLE_ROW3{rx_vlan_frames,The number of received VLAN tagged frames on this NNI (with TPID 8100). This counts both single and double tagged frames.,uint64_t}
\TABLE_ROW3{rx_double_vlan_frames,The number of received double VLAN tagged frames on this NNI (with TPID 8100).,uint64_t}
\TABLE_ROW3{rx_truncated_frames,The number of received truncated frames on this NNI. This is likely due to RX FIFO Full.,uint64_t}
\TABLE_ROW3{rx_undersize_frames,The number of received undersized frames on this NNI.,uint64_t}
\TABLE_ROW3{rx_fragmented_frames,The number of received fragmented frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_good_frames,The number of transmitted good frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_pause_frames,The number of transmitted pause frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_pfc_frames,The number of transmitted PFC frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_jabber_frames,The number of transmitted jabber frames on this NNI. These are oversized frames that also contain an invalid FCS.,uint64_t}
\TABLE_ROW3{tx_control_frames,The number of transmitted control frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_oversize_frames,The number of transmitted oversized frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_fragmented_frames,The number of transmitted fragmented frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_error_frames,The number of transmitted errored frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_vlan_frames,The number of transmitted VLAN tagged frames on this NNI (with TPID 8100). This counts both single and double tagged frames.,uint64_t}
\TABLE_ROW3{tx_double_vlan_frames,The number of transmitted double VLAN tagged frames on this NNI (with TPID 8100).,uint64_t}
\TABLE_ROW3{tx_runt_frames,The number of transmitted runt frames on this NNI.,uint64_t}
\TABLE_ROW3{tx_underrun_frames,The number of transmitted underrun frames on this NNI. Thus happens when a frame encounters a MAC underrun (Tx Sync FIFO runs out of data before the end of packet).,uint64_t}
</table>
\n\n */

/** \page object_internal_nni_enet_stats_cfg StatisticsConfig: enet_stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_internal_nni_enet_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,The number of bytes received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames,The number of frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_64,The number of 64 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_65_127,The number of 65 to 127 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_128_255,The number of 128 to 255 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_256_511,The number of 256 to 511 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_512_1023,The number of 512 to 1023 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1024_1518,The number of 1024 to 1518 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1519_2047,The number of 1519 to 2047 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_2048_4095,The number of 2048 to 4095 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_4096_9216,The number of 4096 to 9216 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_9217_16383,The number of 9217 to 16383 byte frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_broadcast_frames,The number of broadcast frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_data_bytes,The number of data bytes received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_multicast_frames,The number of multicast frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unicast_frames,The number of unicast frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_abort_frames,The number of abort frames received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fcs_error,The number of bad FCS errors received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_oversize_error,The number of oversize errors received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_runt_error,The number of runt errors received.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,The number of bytes transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames,The number of frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_64,The number of 64 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_65_127,The number of 65 to 127 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_128_255,The number of 128 to 255 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_256_511,The number of 256 to 511 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_512_1023,The number of 512 to 1023 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1024_1518,The number of 1024 to 1518 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1519_2047,The number of 1519 to 2047 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_2048_4095,The number of 2048 to 4095 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_4096_9216,The number of 4096 to 9216 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_9217_16383,The number of 9217 to 16383 byte frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_broadcast_frames,The number of broadcast frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_data_bytes,The number of data bytes transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_multicast_frames,The number of multicast frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_unicast_frames,The number of unicast frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_abort_frames,The number of abort frames transmitted.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_fcs_error,The number of transmitted FCS errors on this NNI.,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_internal_nni_nni_stats_cfg StatisticsConfig: nni_stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_internal_nni_nni_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_good_frames,The number of received good frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_control_frames,The number of received control frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_pause_frames,The number of received pause frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_pfc_frames,The number of received PFC frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unsupported_opcode,The number of received Unsupported Opcode frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unsupported_da,The number of received unsupported DA frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_alignment_errors,The number of received alignment errors on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_length_out_of_range,The number of received length out of range errors on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_code_errors,The number of received code errors on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_jabber_frames,The number of received jabber frames on this NNI. these are oversized frames that also contain an invalid CRC\, code error\, or IEEE length check error.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_mtu_check_errors,The number of received MTU Check Errors on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_promiscuous_frames,The number of received frames on this NNI that are not control packets and have a DA that is not matching with the RX SA.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_vlan_frames,The number of received VLAN tagged frames on this NNI (with TPID 8100). This counts both single and double tagged frames.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_double_vlan_frames,The number of received double VLAN tagged frames on this NNI (with TPID 8100).,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_truncated_frames,The number of received truncated frames on this NNI. This is likely due to RX FIFO Full.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_undersize_frames,The number of received undersized frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fragmented_frames,The number of received fragmented frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_good_frames,The number of transmitted good frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_pause_frames,The number of transmitted pause frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_pfc_frames,The number of transmitted PFC frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_jabber_frames,The number of transmitted jabber frames on this NNI. These are oversized frames that also contain an invalid FCS.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_control_frames,The number of transmitted control frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_oversize_frames,The number of transmitted oversized frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_fragmented_frames,The number of transmitted fragmented frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_error_frames,The number of transmitted errored frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_vlan_frames,The number of transmitted VLAN tagged frames on this NNI (with TPID 8100). This counts both single and double tagged frames.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_double_vlan_frames,The number of transmitted double VLAN tagged frames on this NNI (with TPID 8100).,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_runt_frames,The number of transmitted runt frames on this NNI.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_underrun_frames,The number of transmitted underrun frames on this NNI. Thus happens when a frame encounters a MAC underrun (Tx Sync FIFO runs out of data before the end of packet).,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_internal_nni_enet_stats_alarm_cleared Indication: enet_stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_enet_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_internal_nni_enet_stats_data_id}
</table>
\n\n */

/** \page object_internal_nni_enet_stats_alarm_raised Indication: enet_stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_enet_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_internal_nni_enet_stats_data_id}
</table>
\n\n */

/** \page object_internal_nni_nni_stats_alarm_cleared Indication: nni_stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_nni_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_internal_nni_nni_stats_data_id}
</table>
\n\n */

/** \page object_internal_nni_nni_stats_alarm_raised Indication: nni_stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_nni_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_internal_nni_nni_stats_data_id}
</table>
\n\n */

/** \page object_internal_nni_packet_captured Indication: packet_captured

A packet was trapped via the trap_config rules on this interface.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_packet_captured\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{packet_size,The size of the packet trapped.,uint32_t}
\TABLE_ROW3{buffer,The actual packet contents,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_internal_nni_status_changed Indication: status_changed

NNI Link status changed\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_status_changed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_status,New NNI Link Status,\ref bcmolt_status}
\TABLE_ROW3{link,Which NNI this indication pertains to.,\ref bcmolt_nni_connection}
\TABLE_ROW3{previous_active,Which NNI was active before this status change.,\ref bcmolt_nni_connection}
\TABLE_ROW3{new_active,Which NNI is now active after this status change.,\ref bcmolt_nni_connection}
</table>
\n\n */

/** \page object_internal_nni_swap_completed Indication: swap_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_internal_nni_swap_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_internal_nni_send_eth_packet Operation: send_eth_packet

Sends ethernet packet using this flow\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_internal_nni_send_eth_packet\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{buffer,buffer,\ref bcmolt_bin_str}
</table>
\n\n */

/** @}  */
/** \page object_itupon_alloc Object: itupon_alloc - ITU PON Alloc

\n
Object key: bcmolt_itupon_alloc_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_itupon_alloc_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_itupon_alloc_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_itupon_alloc_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_itupon_alloc_configuration_completed "Indication: configuration_completed", Configuration Completed}
\TABLE_ROW2{\subpage object_itupon_alloc_get_alloc_stats_completed "Indication: get_alloc_stats_completed", Collected alloc level statistics from get_stats operation}
\TABLE_ROW2{\subpage object_itupon_alloc_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_itupon_alloc_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_itupon_alloc_get_stats "Operation: get_stats", Run alloc level statistics collection for a given period of time}
\TABLE_ROW2{\subpage object_itupon_alloc_set_state "Operation: set_state", Sets the alloc's activation state.  This is only used for protection switching on an active-standby PON.  In normal operation\, this isn't necessary since allocs are activated/deactivated automatically along with the ONU.}
</table>

@{ */

/** \page object_itupon_alloc_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_itupon_alloc_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{state,Current Alloc ID state,\ref bcmolt_activation_state,R,BCMOLT_ACTIVATION_STATE_NOT_CONFIGURED, , }
\TABLE_ROW7{sla,Alloc ID SLA,\ref bcmolt_pon_alloc_sla,RW, , , }
\TABLE_ROW7{onu_id,ONU ID the alloc ID is assigned to,\ref bcmolt_onu_id,RW, , , }
\TABLE_ROW7{collect_stats,Enable statistics collection for this alloc ID,bcmos_bool,RW, , , }
\TABLE_ROW7{onu_tcont_max_queue_size,For better DBA performance\, this is the maximum size of the TCONT queue for this alloc ID in the ONU\, in bytes. If 0\, it means unconfigured.,uint32_t,RW,0UL,0UL,16777215UL}
</table>
\n\n */

/** \page object_itupon_alloc_stats Statistics: stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_itupon_alloc_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,Number of alloc ID received bytes.,uint64_t}
</table>
\n\n */

/** \page object_itupon_alloc_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_itupon_alloc_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,Number of alloc ID received bytes.,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_itupon_alloc_configuration_completed Indication: configuration_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_alloc_configuration_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{new_state,new state,\ref bcmolt_activation_state}
</table>
\n\n */

/** \page object_itupon_alloc_get_alloc_stats_completed Indication: get_alloc_stats_completed

Collected alloc level statistics from get_stats operation\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_alloc_get_alloc_stats_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{average_nsr_used,Average NSR used words,uint32_t}
\TABLE_ROW3{average_nsr_allocated,Average NSR allocated words,uint32_t}
\TABLE_ROW3{average_sr_report,Average SR report,uint32_t}
</table>
\n\n */

/** \page object_itupon_alloc_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_alloc_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_itupon_alloc_stats_data_id}
</table>
\n\n */

/** \page object_itupon_alloc_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_alloc_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_itupon_alloc_stats_data_id}
</table>
\n\n */

/** \page object_itupon_alloc_get_stats Operation: get_stats

Run alloc level statistics collection for a given period of time\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_itupon_alloc_get_stats\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Default,Minimum,Maximum}
\TABLE_ROW6{num_of_cycles,The number of cycles to run statistics collection,uint32_t,1UL,1UL,10000UL}
</table>
\n\n */

/** \page object_itupon_alloc_set_state Operation: set_state

Sets the alloc's activation state.  This is only used for protection switching on an active-standby PON.  In normal operation, this isn't necessary since allocs are activated/deactivated automatically along with the ONU.\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_itupon_alloc_set_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{state,State,\ref bcmolt_alloc_operation}
</table>
\n\n */

/** @}  */
/** \page object_itupon_gem Object: itupon_gem - ITU PON GEM Port

\n
Object key: bcmolt_itupon_gem_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_itupon_gem_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_itupon_gem_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_itupon_gem_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_itupon_gem_configuration_completed "Indication: configuration_completed", Configuration Completed}
\TABLE_ROW2{\subpage object_itupon_gem_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_itupon_gem_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_itupon_gem_set_state "Operation: set_state", Sets the GEM port's activation state.  This is only used for protection switching on an active-standby PON.  In normal operation\, this isn't necessary since GEM ports are activated/deactivated automatically along with the ONU.}
</table>

@{ */

/** \page object_itupon_gem_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_itupon_gem_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{configuration,GEM port configuration parameters,\ref bcmolt_gem_port_configuration,RW, , , }
\TABLE_ROW7{onu_id,ONU ID this GEM port is assigned to,\ref bcmolt_onu_id,RW, , , }
\TABLE_ROW7{state,Current GEM port state,\ref bcmolt_activation_state,R,BCMOLT_ACTIVATION_STATE_NOT_CONFIGURED, , }
\TABLE_ROW7{encryption_mode,Enable/Disable the encryption mode of the GEM Port,\ref bcmolt_control_state,RW, , , }
\TABLE_ROW7{upstream_destination_queue,The destination queue of the packets arriving on this GEM Port on the upstream direction,\ref bcmolt_us_gem_port_destination,RW, , , }
\TABLE_ROW7{control,Enable/Disable the GEM Port ID in the OLT,\ref bcmolt_control_state,RW, , , }
\TABLE_ROW7{mac_table_entry_limit,The maximum number of MAC table entries allowed for this GEM port (0 = no limit).,uint16_t,RW,0U,0U,128U}
\TABLE_ROW7{debug_flow_config,debug flow config to support mac only learning ,\ref bcmolt_debug_flow_config,RW, , , }
</table>
\n\n */

/** \page object_itupon_gem_stats Statistics: stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_itupon_gem_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_packets,Received GEM frames,uint64_t}
\TABLE_ROW3{rx_bytes,Received bytes,uint64_t}
\TABLE_ROW3{tx_packets,Transmitted GEM frames,uint64_t}
\TABLE_ROW3{tx_bytes,Transmitted bytes,uint64_t}
</table>
\n\n */

/** \page object_itupon_gem_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_itupon_gem_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_packets,Received GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bytes,Received bytes,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,Transmitted GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,Transmitted bytes,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_itupon_gem_configuration_completed Indication: configuration_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_gem_configuration_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{new_state,new state,\ref bcmolt_activation_state}
</table>
\n\n */

/** \page object_itupon_gem_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_gem_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_itupon_gem_stats_data_id}
</table>
\n\n */

/** \page object_itupon_gem_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_itupon_gem_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_itupon_gem_stats_data_id}
</table>
\n\n */

/** \page object_itupon_gem_set_state Operation: set_state

Sets the GEM port's activation state.  This is only used for protection switching on an active-standby PON.  In normal operation, this isn't necessary since GEM ports are activated/deactivated automatically along with the ONU.\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_itupon_gem_set_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{state,State,\ref bcmolt_gem_port_operation}
</table>
\n\n */

/** @}  */
/** \page object_lag_interface Object: lag_interface - LAG interface

Link Aggregation Group\n
Object key: bcmolt_lag_interface_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_lag_interface_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_lag_interface_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_lag_interface_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_lag_interface_complete_members_update "Indication: complete_members_update", members update complete indication}
\TABLE_ROW2{\subpage object_lag_interface_lag_health_change "Indication: lag_health_change", LAG health change}
\TABLE_ROW2{\subpage object_lag_interface_state_updated "Indication: state_updated", LAG interface state has been updated}
\TABLE_ROW2{\subpage object_lag_interface_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_lag_interface_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_lag_interface_members_update "Operation: members_update", members_update}
\TABLE_ROW2{\subpage object_lag_interface_state_update "Operation: state_update", chg state of lag and child nni ports}
</table>

@{ */

/** \page object_lag_interface_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_lag_interface_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{config_state,provisioned or not,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED}
\TABLE_ROW5{psc_mode,port select criteria,\ref bcmolt_lag_psc_mode,RW,BCMOLT_LAG_PSC_MODE_SMOOTH_DIVISION}
\TABLE_ROW5{state,lag admin enable/disable,\ref bcmolt_interface_state,R,BCMOLT_INTERFACE_STATE_ACTIVE_WORKING}
\TABLE_ROW5{protection_type,Provisioned protection type referencing this LAG interface.,\ref bcmolt_protection_type,R, }
\TABLE_ROW5{nni_ids,list of member ports,\ref bcmolt_arr_nni_id_8,R,invalid\,invalid\,invalid\,invalid\,invalid\,invalid\,invalid\,invalid}
\TABLE_ROW5{member_status,link status of members,\ref bcmolt_arr_link_state_8,R, }
\TABLE_ROW5{member_count,num of members,uint8_t,R,0}
\TABLE_ROW5{member_up_count,num of link up members,uint8_t,R,0}
\TABLE_ROW5{lag_health,health of lag,\ref bcmolt_lag_health,R,BCMOLT_LAG_HEALTH_DOWN}
\TABLE_ROW5{sub_type,lag interface subtype,\ref bcmolt_lag_subtype,R, }
</table>
\n\n */

/** \page object_lag_interface_stats Statistics: stats

Sums of Member Port Stats\n

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_lag_interface_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,uint64_t}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,uint64_t}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,uint64_t}
\TABLE_ROW3{tx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,uint64_t}
</table>
\n\n */

/** \page object_lag_interface_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_lag_interface_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_lag_interface_complete_members_update Indication: complete_members_update

members update complete indication\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_lag_interface_complete_members_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_lag_member_update_fail_reason}
</table>
\n\n */

/** \page object_lag_interface_lag_health_change Indication: lag_health_change

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_lag_interface_lag_health_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_state,LAG health,\ref bcmolt_lag_health}
\TABLE_ROW3{old_state,old state,\ref bcmolt_lag_health}
</table>
\n\n */

/** \page object_lag_interface_state_updated Indication: state_updated

LAG interface state has been updated\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_lag_interface_state_updated\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_state,current interface state,\ref bcmolt_interface_state}
\TABLE_ROW3{old_state,previous interface state,\ref bcmolt_interface_state}
\TABLE_ROW3{fault_code,fault_code,\ref bcmolt_link_fault_code}
</table>
\n\n */

/** \page object_lag_interface_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_lag_interface_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_lag_interface_stats_data_id}
</table>
\n\n */

/** \page object_lag_interface_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_lag_interface_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_lag_interface_stats_data_id}
</table>
\n\n */

/** \page object_lag_interface_members_update Operation: members_update

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_lag_interface_members_update\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{members_cmd,members_cmd,\ref bcmolt_lag_interface_members_update_command}
</table>
\n\n */

/** \page object_lag_interface_state_update Operation: state_update

chg state of lag and child nni ports\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_lag_interface_state_update\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{lag_state,lag_state,\ref bcmolt_interface_operation,BCMOLT_INTERFACE_OPERATION_ACTIVE_WORKING}
</table>
\n\n */

/** @}  */
/** \page object_log Object: log - Log

A single embedded log source (usually a single task)\n
Object key: bcmolt_log_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_log_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_log_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_log_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{type,Log type,\ref bcmolt_log_type,RW}
\TABLE_ROW4{style,Log style,\ref bcmolt_log_style,RW}
\TABLE_ROW4{level,Log levels for each file,\ref bcmolt_log_level_per_file,RW}
\TABLE_ROW4{msg_count,Number of messages per log level,\ref bcmolt_log_level_msg_count,R}
\TABLE_ROW4{lost_msg_count,Number of messages lost/dropped,uint32_t,R}
</table>
\n\n */

/** @}  */
/** \page object_log_file Object: log_file - Log File

Memory file generated by system logs\n
Object key: bcmolt_log_file_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_log_file_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_log_file_clear "Operation: clear", Clear the log file}
\TABLE_ROW2{\subpage object_log_file_reset_buffer_ptr "Operation: reset_buffer_ptr", Reset the position of the buffer read pointer so the "buffer" cfg parameter will return the first section of the file}
</table>

@{ */

/** \page object_log_file_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_log_file_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{wrap_around,Log file wrap-around option. TRUE=wrap around when full. FALSE=stop when full,bcmos_bool,RW,BCMOS_TRUE}
\TABLE_ROW5{clear_after_read,Clear log after last record has been read,bcmos_bool,RW,BCMOS_FALSE}
\TABLE_ROW5{msg_count,Number of messages currently in the log,uint32_t,R, }
\TABLE_ROW5{msgs_read,Number of messages already read,uint32_t,R, }
\TABLE_ROW5{msgs_remaining,Number of unread messages remaining in the log file,uint32_t,R, }
\TABLE_ROW5{buffer,Contains a section of the log buffer\, one message per line. Reading this field causes it to move to the next section.,\ref bcmolt_str_2048,R, }
</table>
\n\n */

/** \page object_log_file_clear Operation: clear

Clear the log file\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_log_file_clear\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_log_file_reset_buffer_ptr Operation: reset_buffer_ptr

Reset the position of the buffer read pointer so the "buffer" cfg parameter will return the first section of the file\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_log_file_reset_buffer_ptr\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** @}  */
/** \page object_ngpon2_channel Object: ngpon2_channel - Channel

Channel\n
Object key: bcmolt_ngpon2_channel_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_ngpon2_channel_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_ngpon2_channel_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_ngpon2_channel_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{system_profile,System profile,\ref bcmolt_system_profile,RW}
\TABLE_ROW4{channel_profile,Channel profile,\ref bcmolt_arr_channel_profile_8,RW}
</table>
\n\n */

/** @}  */
/** \page object_nni_interface Object: nni_interface - nni_interface

nni_interface\n
Object key: bcmolt_nni_interface_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_nni_interface_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_nni_interface_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_nni_interface_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_nni_interface_link_state_change "Indication: link_state_change", Link State Change reported by Switch.}
\TABLE_ROW2{\subpage object_nni_interface_state_change "Indication: state_change", State Change complete inidcation.}
\TABLE_ROW2{\subpage object_nni_interface_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_nni_interface_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_nni_interface_set_nni_state "Operation: set_nni_state", set_nni_state}
</table>

@{ */

/** \page object_nni_interface_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_nni_interface_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{config_state,config_state,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_CONFIGURED}
\TABLE_ROW5{state,state,\ref bcmolt_interface_state,R, }
\TABLE_ROW5{protection_type,Provisioned protection type on this NNI interface,\ref bcmolt_protection_type,R, }
\TABLE_ROW5{link_state,Current Link State (Link Up or Link Down),\ref bcmolt_link_state,R, }
\TABLE_ROW5{link_fault_code,Link Fault Code (Local or Remote Fault),\ref bcmolt_link_fault_code,R, }
\TABLE_ROW5{description,Descriptive string ,\ref bcmolt_str_48,RW, }
\TABLE_ROW5{mtu,max frame size in bytes,uint32_t,R, }
\TABLE_ROW5{speed,ethernet speed in Mbps,uint32_t,R, }
\TABLE_ROW5{duplex,ethernet duplex mode,\ref bcmolt_duplex_mode,R, }
\TABLE_ROW5{auto_negotiate,ethernet auto negotiation mode,\ref bcmolt_control_state,R, }
\TABLE_ROW5{sub_type,nni interface subtype,\ref bcmolt_nni_subtype,R, }
</table>
\n\n */

/** \page object_nni_interface_stats Statistics: stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_nni_interface_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,uint64_t}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,uint64_t}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,uint64_t}
\TABLE_ROW3{tx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,uint64_t}
</table>
\n\n */

/** \page object_nni_interface_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_nni_interface_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_nni_interface_link_state_change Indication: link_state_change

Link State Change reported by Switch.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_nni_interface_link_state_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{old_state,old_state,\ref bcmolt_link_state}
\TABLE_ROW3{new_state,new_state,\ref bcmolt_link_state}
\TABLE_ROW3{fault_code,fault_code,\ref bcmolt_link_fault_code}
</table>
\n\n */

/** \page object_nni_interface_state_change Indication: state_change

State Change complete inidcation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_nni_interface_state_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,State Change Request result (Success / Failure).,\ref bcmolt_result}
\TABLE_ROW3{old_state,Previous Interface state.,\ref bcmolt_interface_state}
\TABLE_ROW3{new_state,New Interface state.,\ref bcmolt_interface_state}
</table>
\n\n */

/** \page object_nni_interface_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_nni_interface_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_nni_interface_stats_data_id}
</table>
\n\n */

/** \page object_nni_interface_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_nni_interface_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_nni_interface_stats_data_id}
</table>
\n\n */

/** \page object_nni_interface_set_nni_state Operation: set_nni_state

set_nni_state\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_nni_interface_set_nni_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{nni_state,nni_state,\ref bcmolt_interface_operation}
</table>
\n\n */

/** @}  */
/** \page object_olt Object: olt - olt

olt\n
Object key: bcmolt_olt_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_olt_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_olt_bal_failure "Indication: bal_failure", Indication that BAL and/or Switch initialization Failed}
\TABLE_ROW2{\subpage object_olt_bal_ready "Indication: bal_ready", Notification that BAL and Switch are ready}
\TABLE_ROW2{\subpage object_olt_sw_error "Indication: sw_error", Software error reported by components in BAL}
\TABLE_ROW2{\subpage object_olt_bal_reset "Operation: bal_reset", Reset BAL and switch if applicable}
\TABLE_ROW2{\subpage object_olt_connect "Operation: connect", API Connection Mgr connect to host side for OLT}
\TABLE_ROW2{\subpage object_olt_disconnect "Operation: disconnect", API Connection Mgr disconnect from host side\, for the OLT}
\TABLE_ROW2{\subpage object_olt_reset "Operation: reset", OLT Reset}
</table>

@{ */

/** \page object_olt_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_olt_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{topology,Topology as configured in Topology.ini,\ref bcmolt_topology,R}
\TABLE_ROW4{bal_state,BAL and Switch device state,\ref bcmolt_bal_state,R}
\TABLE_ROW4{host_sw_version,Host Software version,\ref bcmolt_host_sw_version,R}
</table>
\n\n */

/** \page object_olt_bal_failure Indication: bal_failure

Indication that BAL and/or Switch initialization Failed\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_olt_bal_failure\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{reason,Disconnect reason,\ref bcmolt_bal_fail_reason}
</table>
\n\n */

/** \page object_olt_bal_ready Indication: bal_ready

Notification that BAL and Switch are ready\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_olt_bal_ready\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_olt_sw_error Indication: sw_error

Software error reported by components in BAL\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_olt_sw_error\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{task_name,Task Name,\ref bcmolt_str_100}
\TABLE_ROW3{file_name,File Name,\ref bcmolt_str_100}
\TABLE_ROW3{line_number,Line Number,uint32_t}
\TABLE_ROW3{error_string,User error string,\ref bcmolt_str_100}
</table>
\n\n */

/** \page object_olt_bal_reset Operation: bal_reset

Reset BAL and switch if applicable\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_olt_bal_reset\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_olt_connect Operation: connect

API Connection Mgr connect to host side for OLT\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_olt_connect\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_olt_disconnect Operation: disconnect

API Connection Mgr disconnect from host side, for the OLT\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_olt_disconnect\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_olt_reset Operation: reset

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_olt_reset\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{mode,Reset Mode,\ref bcmolt_reset_mode}
</table>
\n\n */

/** @}  */
/** \page object_onu Object: onu - ONU

\n
Object key: bcmolt_onu_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_onu_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_onu_itu_pon_stats "Statistics: itu_pon_stats", Object statistics}
\TABLE_ROW2{\subpage object_onu_itu_pon_stats_cfg "StatisticsConfig: itu_pon_stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_onu_ber_interval_configuration_completed "Indication: ber_interval_configuration_completed", BER Interval Configuration Completed}
\TABLE_ROW2{\subpage object_onu_cpu_packet "Indication: cpu_packet", Indicates CPU packet was received on the US from this ONU id}
\TABLE_ROW2{\subpage object_onu_dfi "Indication: dfi", Receive Dying-Gasp of ONUi}
\TABLE_ROW2{\subpage object_onu_dgi "Indication: dgi", Receive Dying-Gasp of ONUi}
\TABLE_ROW2{\subpage object_onu_dowi "Indication: dowi", Drift of Window of ONUi}
\TABLE_ROW2{\subpage object_onu_err "Indication: err", ERR}
\TABLE_ROW2{\subpage object_onu_gpon_alarm "Indication: gpon_alarm", GPON ONU Alarm}
\TABLE_ROW2{\subpage object_onu_invalid_dbru_report "Indication: invalid_dbru_report", Invalid DBRu Report}
\TABLE_ROW2{\subpage object_onu_itu_pon_stats_alarm_cleared "Indication: itu_pon_stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_onu_itu_pon_stats_alarm_raised "Indication: itu_pon_stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_onu_key_exchange_completed "Indication: key_exchange_completed", Key Exchange Completed}
\TABLE_ROW2{\subpage object_onu_key_exchange_cycle_skipped "Indication: key_exchange_cycle_skipped", Key Exchange Cycle Skipped}
\TABLE_ROW2{\subpage object_onu_key_exchange_decrypt_required "Indication: key_exchange_decrypt_required", Key Exchange Decrypt Required}
\TABLE_ROW2{\subpage object_onu_key_exchange_key_mismatch "Indication: key_exchange_key_mismatch", Key Exchange Key Mismatch}
\TABLE_ROW2{\subpage object_onu_key_exchange_key_request_timeout "Indication: key_exchange_key_request_timeout", Key Exchange Key Request Timeout}
\TABLE_ROW2{\subpage object_onu_key_exchange_unconsecutive_index "Indication: key_exchange_unconsecutive_index", Key Exchange Unconsecutive Index}
\TABLE_ROW2{\subpage object_onu_loai "Indication: loai", LOAi}
\TABLE_ROW2{\subpage object_onu_loki "Indication: loki", LOki}
\TABLE_ROW2{\subpage object_onu_looci "Indication: looci", LOOCi}
\TABLE_ROW2{\subpage object_onu_memi "Indication: memi", MEMi}
\TABLE_ROW2{\subpage object_onu_omci_packet "Indication: omci_packet", Indicates OMCI packet was received on the US from this ONU id}
\TABLE_ROW2{\subpage object_onu_omci_port_id_configuration_completed "Indication: omci_port_id_configuration_completed", OMCI PORT ID Configuration Completed}
\TABLE_ROW2{\subpage object_onu_onu_activation_completed "Indication: onu_activation_completed", ONU Activation Completed}
\TABLE_ROW2{\subpage object_onu_onu_activation_standby_completed "Indication: onu_activation_standby_completed", onu activation standby completed}
\TABLE_ROW2{\subpage object_onu_onu_deactivation_completed "Indication: onu_deactivation_completed", ONU Deactivation Completed}
\TABLE_ROW2{\subpage object_onu_onu_disable_completed "Indication: onu_disable_completed", ONU Disable Completed}
\TABLE_ROW2{\subpage object_onu_onu_enable_completed "Indication: onu_enable_completed", ONU Enable Completed}
\TABLE_ROW2{\subpage object_onu_onu_ready_for_data_grant "Indication: onu_ready_for_data_grant", The ONU should be ready to get its first data grants (for the default alloc ID) to use it for acknowledgement. This is relevant for external and partial-external DBA implementation types only}
\TABLE_ROW2{\subpage object_onu_onu_tuning_in_completed "Indication: onu_tuning_in_completed", ONU Tuning in completed}
\TABLE_ROW2{\subpage object_onu_onu_tuning_out_completed "Indication: onu_tuning_out_completed", ONU Tuning out completed}
\TABLE_ROW2{\subpage object_onu_optical_reflection "Indication: optical_reflection", An optical reflection condition was detected.}
\TABLE_ROW2{\subpage object_onu_password_authentication_completed "Indication: password_authentication_completed", Password Authentication Completed}
\TABLE_ROW2{\subpage object_onu_pee "Indication: pee", PEE}
\TABLE_ROW2{\subpage object_onu_possible_drift "Indication: possible_drift", An ONU in a low power state may be experiencing drift beyond the configured threshold. The estimate may be inaccurate depending on ONU behavior. Actual drift may be less than estimated.}
\TABLE_ROW2{\subpage object_onu_power_consumption_report "Indication: power_consumption_report", Power consumption report}
\TABLE_ROW2{\subpage object_onu_power_level_report "Indication: power_level_report", Power level report}
\TABLE_ROW2{\subpage object_onu_power_management_state_change "Indication: power_management_state_change", Notification that an ONUs power management state has changed.}
\TABLE_ROW2{\subpage object_onu_pqsi "Indication: pqsi", ploam queue status}
\TABLE_ROW2{\subpage object_onu_pst "Indication: pst", PST}
\TABLE_ROW2{\subpage object_onu_range_value_changed "Indication: range_value_changed", Range Value Changed}
\TABLE_ROW2{\subpage object_onu_ranging_completed "Indication: ranging_completed", Ranging Completed}
\TABLE_ROW2{\subpage object_onu_registration_id "Indication: registration_id", Registration ID}
\TABLE_ROW2{\subpage object_onu_rei "Indication: rei", REI}
\TABLE_ROW2{\subpage object_onu_rssi_measurement_completed "Indication: rssi_measurement_completed", RSSI Measurement Completed}
\TABLE_ROW2{\subpage object_onu_sdi "Indication: sdi", Signal Degraded of ONUi}
\TABLE_ROW2{\subpage object_onu_secure_mutual_authentication_failure "Indication: secure_mutual_authentication_failure", Failure of secure mutual authentication due to MIC error}
\TABLE_ROW2{\subpage object_onu_sfi "Indication: sfi", Signal Fail of ONUi}
\TABLE_ROW2{\subpage object_onu_state_change "Indication: state_change", State Change}
\TABLE_ROW2{\subpage object_onu_sufi "Indication: sufi", SUFi}
\TABLE_ROW2{\subpage object_onu_tiwi "Indication: tiwi", Transmission Interference Warning}
\TABLE_ROW2{\subpage object_onu_trap_ploam_received "Indication: trap_ploam_received", trap ploam received}
\TABLE_ROW2{\subpage object_onu_tuning_response "Indication: tuning_response", Tuning response}
\TABLE_ROW2{\subpage object_onu_xgpon_alarm "Indication: xgpon_alarm", XGPON ONU Alarm}
\TABLE_ROW2{\subpage object_onu_xpon_unknown_ploam "Indication: xpon_unknown_ploam", XPON Unknown ploam}
\TABLE_ROW2{\subpage object_onu_adjust_tx_wavelength "Operation: adjust_tx_wavelength", Instruct the ONU to adjust its upstream transmitter wavelength}
\TABLE_ROW2{\subpage object_onu_change_power_levelling "Operation: change_power_levelling", Change power levelling}
\TABLE_ROW2{\subpage object_onu_cpu_packets "Operation: cpu_packets", XGPON CPU packets}
\TABLE_ROW2{\subpage object_onu_force_deactivation "Operation: force_deactivation", Force deactivation}
\TABLE_ROW2{\subpage object_onu_get_power_consumption "Operation: get_power_consumption", ONU should report its power consumption information via the Power Consumption Report Ploam message}
\TABLE_ROW2{\subpage object_onu_get_power_level "Operation: get_power_level", ONU should report its launch optical power level as part of the Acknowledgment Ploam message}
\TABLE_ROW2{\subpage object_onu_ploam_packet "Operation: ploam_packet", PLOAM Packet}
\TABLE_ROW2{\subpage object_onu_request_registration "Operation: request_registration", Request the ONU to send its Registration ID}
\TABLE_ROW2{\subpage object_onu_rssi_measurement "Operation: rssi_measurement", RSSI Measurement}
\TABLE_ROW2{\subpage object_onu_secure_mutual_authentication "Operation: secure_mutual_authentication", OMCI base secure mutual authentication}
\TABLE_ROW2{\subpage object_onu_set_onu_state "Operation: set_onu_state", Set ONU State}
\TABLE_ROW2{\subpage object_onu_tuning_in "Operation: tuning_in", ONU Tuning in}
\TABLE_ROW2{\subpage object_onu_tuning_out "Operation: tuning_out", ONU Tuning out}
</table>

@{ */

/** \page object_onu_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_onu_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{onu_state,Current ONU state,\ref bcmolt_onu_state,RW,BCMOLT_ONU_STATE_NOT_CONFIGURED}
\TABLE_ROW5{onu_old_state,onu old state,\ref bcmolt_onu_state,R,BCMOLT_ONU_STATE_NOT_CONFIGURED}
\TABLE_ROW5{onu_rate,ONU rate,\ref bcmolt_onu_rate,RW, }
\TABLE_ROW5{itu,ITU ONU Parameters (GPON\, XGPON1\, NGPON2\, XGS PON),\ref bcmolt_itu_onu_params,RW, }
</table>
\n\n */

/** \page object_onu_itu_pon_stats Statistics: itu_pon_stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_onu_itu_pon_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{positive_drift,positive drift,uint64_t}
\TABLE_ROW3{negative_drift,negative drift,uint64_t}
\TABLE_ROW3{delimiter_miss_detection,unreceived bursts,uint64_t}
\TABLE_ROW3{bip_errors,bip errors,uint64_t}
\TABLE_ROW3{bip_units,Number of 4-byte words xgpon or bytes gpon received (word size is 4 bytes regardless of upstream data rate).,uint64_t}
\TABLE_ROW3{fec_corrected_symbols,fec corrected symbols  (Not relevant in GPON system modes),uint64_t}
\TABLE_ROW3{fec_codewords_corrected,fec corrected codewords,uint64_t}
\TABLE_ROW3{fec_codewords_uncorrectable,fec uncorrectable codewords,uint64_t}
\TABLE_ROW3{fec_codewords,fec total codewords,uint64_t}
\TABLE_ROW3{fec_corrected_units,fec corrected units (In GPON units are bits in other system modes\, units are Bytes),uint64_t}
\TABLE_ROW3{xgem_key_errors,xgem key error,uint64_t}
\TABLE_ROW3{xgem_loss,xgem loss ,uint64_t}
\TABLE_ROW3{rx_ploams_error,mic error ploam,uint64_t}
\TABLE_ROW3{rx_ploams_non_idle,non idle ploam,uint64_t}
\TABLE_ROW3{rx_omci,Received OMCI packets,uint64_t}
\TABLE_ROW3{rx_omci_packets_crc_error,Received OMCI packets with CRC errors,uint64_t}
\TABLE_ROW3{rx_bytes,rx bytes,uint64_t}
\TABLE_ROW3{rx_packets,rx packets,uint64_t}
\TABLE_ROW3{tx_bytes,tx bytes,uint64_t}
\TABLE_ROW3{tx_packets,tx packets,uint64_t}
\TABLE_ROW3{ber_reported,gpon only ,uint64_t}
\TABLE_ROW3{lcdg_errors,LCDG errors,uint64_t}
\TABLE_ROW3{rdi_errors,RDI errors,uint64_t}
</table>
\n\n */

/** \page object_onu_itu_pon_stats_cfg StatisticsConfig: itu_pon_stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_onu_itu_pon_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{positive_drift,positive drift,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{negative_drift,negative drift,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{delimiter_miss_detection,unreceived bursts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{bip_errors,bip errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{bip_units,Number of 4-byte words xgpon or bytes gpon received (word size is 4 bytes regardless of upstream data rate).,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_corrected_symbols,fec corrected symbols  (Not relevant in GPON system modes),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_codewords_corrected,fec corrected codewords,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_codewords_uncorrectable,fec uncorrectable codewords,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_codewords,fec total codewords,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_corrected_units,fec corrected units (In GPON units are bits in other system modes\, units are Bytes),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{xgem_key_errors,xgem key error,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{xgem_loss,xgem loss ,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams_error,mic error ploam,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams_non_idle,non idle ploam,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_omci,Received OMCI packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_omci_packets_crc_error,Received OMCI packets with CRC errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bytes,rx bytes,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets,rx packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,tx bytes,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,tx packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{ber_reported,gpon only ,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{lcdg_errors,LCDG errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rdi_errors,RDI errors,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_onu_ber_interval_configuration_completed Indication: ber_interval_configuration_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_ber_interval_configuration_completed\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{ber_interval,BER interval in ms,\ref bcmolt_ber_interval,0UL}
\TABLE_ROW4{result,Result,\ref bcmolt_result, }
</table>
\n\n */

/** \page object_onu_cpu_packet Indication: cpu_packet

Indicates CPU packet was received on the US from this ONU id\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_cpu_packet\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{port_id,port id,uint16_t}
\TABLE_ROW3{crc_ok,crc ok,bcmos_bool}
\TABLE_ROW3{packet_size,packet size,uint32_t}
\TABLE_ROW3{buffer,buffer,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_onu_dfi Indication: dfi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_dfi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_dgi Indication: dgi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_dgi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_dowi Indication: dowi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_dowi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,Alarm status,\ref bcmolt_status}
\TABLE_ROW3{drift_value,Calculated amount of drift (positive + negative as a signed value).,int32_t}
\TABLE_ROW3{new_eqd,New EQD after drift is corrected (only valid if status is 'on').,uint32_t}
</table>
\n\n */

/** \page object_onu_err Indication: err

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_err\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{bip8_errors,BIP8 errors,uint8_t}
</table>
\n\n */

/** \page object_onu_gpon_alarm Indication: gpon_alarm

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_gpon_alarm\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{gpon_onu_alarm,gpon onu alarm,\ref bcmolt_gpon_onu_alarms}
</table>
\n\n */

/** \page object_onu_invalid_dbru_report Indication: invalid_dbru_report

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_invalid_dbru_report\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alloc_id,Alloc-ID,\ref bcmolt_alloc_id}
</table>
\n\n */

/** \page object_onu_itu_pon_stats_alarm_cleared Indication: itu_pon_stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_itu_pon_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_onu_itu_pon_stats_data_id}
</table>
\n\n */

/** \page object_onu_itu_pon_stats_alarm_raised Indication: itu_pon_stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_itu_pon_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_onu_itu_pon_stats_data_id}
</table>
\n\n */

/** \page object_onu_key_exchange_completed Indication: key_exchange_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_key,new key,\ref bcmolt_itupon_onu_aes_key}
</table>
\n\n */

/** \page object_onu_key_exchange_cycle_skipped Indication: key_exchange_cycle_skipped

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_cycle_skipped\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_key_exchange_decrypt_required Indication: key_exchange_decrypt_required

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_decrypt_required\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_key,new key,\ref bcmolt_aes_key}
</table>
\n\n */

/** \page object_onu_key_exchange_key_mismatch Indication: key_exchange_key_mismatch

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_key_mismatch\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{expected_key,expected key,\ref bcmolt_aes_key}
\TABLE_ROW3{received_key,received key,\ref bcmolt_aes_key}
</table>
\n\n */

/** \page object_onu_key_exchange_key_request_timeout Indication: key_exchange_key_request_timeout

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_key_request_timeout\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_key_exchange_unconsecutive_index Indication: key_exchange_unconsecutive_index

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_key_exchange_unconsecutive_index\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{expected_index,expected index,uint32_t}
\TABLE_ROW3{actual_index,actual index,uint32_t}
</table>
\n\n */

/** \page object_onu_loai Indication: loai

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_loai\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_loki Indication: loki

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_loki\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_looci Indication: looci

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_looci\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_memi Indication: memi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_memi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ploam_buffer,PLOAM buffer,\ref bcmolt_bin_str_13}
</table>
\n\n */

/** \page object_onu_omci_packet Indication: omci_packet

Indicates OMCI packet was received on the US from this ONU id\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_omci_packet\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{port_id,port id,uint16_t}
\TABLE_ROW3{crc_ok,crc ok,bcmos_bool}
\TABLE_ROW3{packet_size,packet size,uint32_t}
\TABLE_ROW3{buffer,buffer,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_onu_omci_port_id_configuration_completed Indication: omci_port_id_configuration_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_omci_port_id_configuration_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{gem_port,GEM Port ID,\ref bcmolt_gem_port_id}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{operation,Operation,\ref bcmolt_omci_port_id_operation}
</table>
\n\n */

/** \page object_onu_onu_activation_completed Indication: onu_activation_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_activation_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_activation_fail_reason}
\TABLE_ROW3{registration_id,registration id,\ref bcmolt_bin_str_36}
\TABLE_ROW3{registration_encryption_keys,registration encryption keys,\ref bcmolt_xgpon_onu_registration_keys}
\TABLE_ROW3{rssi_measurement,rssi measurement ,\ref bcmolt_rssi_measurement_result}
</table>
\n\n */

/** \page object_onu_onu_activation_standby_completed Indication: onu_activation_standby_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_activation_standby_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
</table>
\n\n */

/** \page object_onu_onu_deactivation_completed Indication: onu_deactivation_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_deactivation_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,Status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_deactivation_fail_reason}
</table>
\n\n */

/** \page object_onu_onu_disable_completed Indication: onu_disable_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_disable_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{serial_number,serial number,\ref bcmolt_serial_number}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_deactivation_fail_reason}
\TABLE_ROW3{status,status,\ref bcmolt_result}
</table>
\n\n */

/** \page object_onu_onu_enable_completed Indication: onu_enable_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_enable_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{serial_number,serial number,\ref bcmolt_serial_number}
</table>
\n\n */

/** \page object_onu_onu_ready_for_data_grant Indication: onu_ready_for_data_grant

The ONU should be ready to get its first data grants (for the default alloc ID) to use it for acknowledgement. This is relevant for external and partial-external DBA implementation types only\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_ready_for_data_grant\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_onu_tuning_in_completed Indication: onu_tuning_in_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_tuning_in_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_tune_in_fail_reason}
</table>
\n\n */

/** \page object_onu_onu_tuning_out_completed Indication: onu_tuning_out_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_onu_tuning_out_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_tune_out_fail_reason}
</table>
\n\n */

/** \page object_onu_optical_reflection Indication: optical_reflection

An optical reflection condition was detected.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_optical_reflection\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_password_authentication_completed Indication: password_authentication_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_password_authentication_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_password_authentication_fail_reason}
\TABLE_ROW3{password,password,\ref bcmolt_bin_str_10}
</table>
\n\n */

/** \page object_onu_pee Indication: pee

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_pee\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_possible_drift Indication: possible_drift

An ONU in a low power state may be experiencing drift beyond the configured threshold. The estimate may be inaccurate depending on ONU behavior. Actual drift may be less than estimated.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_possible_drift\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,On: estimated drift has exceeded the configured threshold.,\ref bcmolt_status}
\TABLE_ROW3{estimated_drift,If status is on\, the estimated drift value\, otherwise zero (0).,int32_t}
</table>
\n\n */

/** \page object_onu_power_consumption_report Indication: power_consumption_report

Power consumption report\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_power_consumption_report\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{power_consumption_report,power consumption report,\ref bcmolt_arr_power_consumption_channel_report_8}
</table>
\n\n */

/** \page object_onu_power_level_report Indication: power_level_report

Power level report\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_power_level_report\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{attenuation,Attenuation,uint8_t}
\TABLE_ROW3{power_levelling_capability,Power levelling capability,uint8_t}
</table>
\n\n */

/** \page object_onu_power_management_state_change Indication: power_management_state_change

Notification that an ONUs power management state has changed.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_power_management_state_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{old_state,The state the ONU was previously in.,\ref bcmolt_onu_state}
\TABLE_ROW3{new_state,The state the ONU is currently in.,\ref bcmolt_onu_state}
\TABLE_ROW3{reason,The reason for the state change.,\ref bcmolt_power_management_transition_reason}
</table>
\n\n */

/** \page object_onu_pqsi Indication: pqsi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_pqsi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_pst Indication: pst

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_pst\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{link_number,link number,uint32_t}
\TABLE_ROW3{k1,K1,uint8_t}
\TABLE_ROW3{k2,K2,uint8_t}
</table>
\n\n */

/** \page object_onu_range_value_changed Indication: range_value_changed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_range_value_changed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{range_value_tq,New range value.,\ref bcmolt_time_quanta}
</table>
\n\n */

/** \page object_onu_ranging_completed Indication: ranging_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_ranging_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_ranging_fail_reason}
\TABLE_ROW3{eqd,EQD,uint32_t}
\TABLE_ROW3{number_of_ploams,number of ploams,uint8_t}
</table>
\n\n */

/** \page object_onu_registration_id Indication: registration_id

Registration ID\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_registration_id\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{registration_id,Registration ID,\ref bcmolt_bin_str_36}
\TABLE_ROW3{request_registration_status,request registration status,\ref bcmolt_result}
\TABLE_ROW3{request_registration_fail_reason,request registration fail reason,\ref bcmolt_request_registration_fail_reason}
</table>
\n\n */

/** \page object_onu_rei Indication: rei

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_rei\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{bip8_errors,BIP8 errors,uint8_t}
</table>
\n\n */

/** \page object_onu_rssi_measurement_completed Indication: rssi_measurement_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_rssi_measurement_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,fail reason,\ref bcmolt_rssi_measurement_fail_reason}
</table>
\n\n */

/** \page object_onu_sdi Indication: sdi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_sdi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
\TABLE_ROW3{ber,Inverse bit error rate (e.g. if this number is 1000\, the BER is 1/1000).,uint32_t}
</table>
\n\n */

/** \page object_onu_secure_mutual_authentication_failure Indication: secure_mutual_authentication_failure

Failure of secure mutual authentication due to MIC error\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_secure_mutual_authentication_failure\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,secure mutual authentication fail reason,\ref bcmolt_secure_mutual_authentication_fail_reason}
</table>
\n\n */

/** \page object_onu_sfi Indication: sfi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_sfi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
\TABLE_ROW3{ber,Inverse bit error rate (e.g. if this number is 1000\, the BER is 1/1000).,uint32_t}
</table>
\n\n */

/** \page object_onu_state_change Indication: state_change

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_state_change\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_onu_state,New ONU state,\ref bcmolt_onu_operation}
</table>
\n\n */

/** \page object_onu_sufi Indication: sufi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_sufi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,alarm status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_onu_tiwi Indication: tiwi

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_tiwi\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{alarm_status,Alarm status,\ref bcmolt_status}
\TABLE_ROW3{drift_value,Calculated amount of drift (positive + negative as a signed value).,int32_t}
</table>
\n\n */

/** \page object_onu_trap_ploam_received Indication: trap_ploam_received

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_trap_ploam_received\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{message_id,message id,uint8_t}
\TABLE_ROW3{onu_id,onu_id,uint16_t}
\TABLE_ROW3{data,data,\ref bcmolt_u8_list_u8_hex}
</table>
\n\n */

/** \page object_onu_tuning_response Indication: tuning_response

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_tuning_response\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ack,is tuning response received with ack or nack,bcmos_bool}
\TABLE_ROW3{result,result,\ref bcmolt_result}
</table>
\n\n */

/** \page object_onu_xgpon_alarm Indication: xgpon_alarm

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_xgpon_alarm\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{xgpon_onu_alarm,xgpon onu alarm,\ref bcmolt_xgpon_onu_alarms}
</table>
\n\n */

/** \page object_onu_xpon_unknown_ploam Indication: xpon_unknown_ploam

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_onu_xpon_unknown_ploam\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ploam_buffer,PLOAM buffer,\ref bcmolt_bin_str_48}
</table>
\n\n */

/** \page object_onu_adjust_tx_wavelength Operation: adjust_tx_wavelength

Instruct the ONU to adjust its upstream transmitter wavelength\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_adjust_tx_wavelength\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{frequency_adjustment_direction,Frequency adjustment direction,\ref bcmolt_frequency_adjustment_direction}
\TABLE_ROW3{frequency_adjustment_size,The size of the frequency adjustment in units of 0.1GHz,uint8_t}
</table>
\n\n */

/** \page object_onu_change_power_levelling Operation: change_power_levelling

Change power levelling\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_change_power_levelling\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{control,control,\ref bcmolt_power_levelling_control}
\TABLE_ROW3{attenuation,The requested attenuation in steps of 3dB as part of power levelling instruction,uint8_t}
</table>
\n\n */

/** \page object_onu_cpu_packets Operation: cpu_packets

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_cpu_packets\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Maximum}
\TABLE_ROW4{packet_type,packet type,\ref bcmolt_packet_type, }
\TABLE_ROW4{calc_crc,calc crc,bcmos_bool, }
\TABLE_ROW4{number_of_packets,number of packets,uint8_t,32}
\TABLE_ROW4{packet_size,Single packet size,uint16_t,2000U}
\TABLE_ROW4{buffer,buffer,\ref bcmolt_bin_str, }
</table>
\n\n */

/** \page object_onu_force_deactivation Operation: force_deactivation

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_force_deactivation\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_get_power_consumption Operation: get_power_consumption

ONU should report its power consumption information via the Power Consumption Report Ploam message\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_get_power_consumption\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_get_power_level Operation: get_power_level

ONU should report its launch optical power level as part of the Acknowledgment Ploam message\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_get_power_level\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_ploam_packet Operation: ploam_packet

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_ploam_packet\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{default_key,default key,bcmos_bool,BCMOS_FALSE}
\TABLE_ROW4{ploam,ploam,\ref bcmolt_bin_str_40, }
</table>
\n\n */

/** \page object_onu_request_registration Operation: request_registration

Request the ONU to send its Registration ID\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_request_registration\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{sma_flag,Is the request registration process is part of the SMA process,bcmos_bool,BCMOS_FALSE}
</table>
\n\n */

/** \page object_onu_rssi_measurement Operation: rssi_measurement

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_rssi_measurement\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_secure_mutual_authentication Operation: secure_mutual_authentication

OMCI base secure mutual authentication\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_secure_mutual_authentication\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{master_key,master key,\ref bcmolt_aes_key}
\TABLE_ROW3{buffer,OMCI data buffer,\ref bcmolt_bin_str}
\TABLE_ROW3{mic,mic,uint32_t}
</table>
\n\n */

/** \page object_onu_set_onu_state Operation: set_onu_state

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_set_onu_state\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Default}
\TABLE_ROW4{onu_state,ONU state,\ref bcmolt_onu_operation, }
\TABLE_ROW4{measure_rssi,Enable RSSI measurement during activation,bcmos_bool,BCMOS_FALSE}
</table>
\n\n */

/** \page object_onu_tuning_in Operation: tuning_in

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_tuning_in\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_onu_tuning_out Operation: tuning_out

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_onu_tuning_out\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Default,Minimum}
\TABLE_ROW5{target_ds_pon_id,target ds pon id,\ref bcmolt_pon_id, , }
\TABLE_ROW5{target_us_pon_id,target us pon id,\ref bcmolt_pon_id, , }
\TABLE_ROW5{time_to_switch,Time to switch in ms,uint32_t, ,500UL}
\TABLE_ROW5{rollback,rollback,bcmos_bool,BCMOS_FALSE, }
\TABLE_ROW5{status,on- to start tuning out off- to stop tuning out,\ref bcmolt_status, , }
</table>
\n\n */

/** @}  */
/** \page object_pbit_to_tc Object: pbit_to_tc - pbit_to_tc

pbit to tc\n
Object key: bcmolt_pbit_to_tc_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_pbit_to_tc_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_pbit_to_tc_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_pbit_to_tc_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{tc,tc (0..7) set for a pbit 0..7,\ref bcmolt_bin_str_8,RW}
</table>
\n\n */

/** @}  */
/** \page object_policer_profile Object: policer_profile - policer (aka meter) profile

Parameters needed to instantiate a policer\n
Object key: bcmolt_policer_profile_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_policer_profile_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_policer_profile_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_policer_profile_cfg\n
<table>
\TABLE_HDR7{Parameter Name,Parameter Description,Data Type,Access,Default,Minimum,Maximum}
\TABLE_ROW7{state,not_configured => entry not used,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED, , }
\TABLE_ROW7{type,meter type - single rate\, two color\, etc.,\ref bcmolt_policer_type,RW,BCMOLT_POLICER_TYPE_SR_TCM, , }
\TABLE_ROW7{traffic_type,type of traffic (Unk Uni\, Broadcast\, etc.) to police,\ref bcmolt_traffic_type,RW,BCMOLT_TRAFFIC_TYPE_BROADCAST, , }
\TABLE_ROW7{cir_kbps,commited rate in kbps,uint32_t,RW,100UL,0UL,100000000UL}
\TABLE_ROW7{eir_kbps,excess rate in kbps,uint32_t,RW,50UL,0UL,100000000UL}
\TABLE_ROW7{cbs_kb,committed burst in kb,uint32_t,RW,64UL,1UL,33292UL}
\TABLE_ROW7{ebs_kb,excess burst in kb,uint32_t,RW,32UL,1UL,33292UL}
\TABLE_ROW7{color_awareness,enable color reading from input packet. method is spec'd in input tm_cmp for port,bcmos_bool,R,BCMOS_FALSE, , }
\TABLE_ROW7{color_marking,enable color marking to outgoing packet. method is spec'd in output tm_cmp for port,bcmos_bool,R,BCMOS_FALSE, , }
</table>
\n\n */

/** @}  */
/** \page object_pon_interface Object: pon_interface - pon interface

PON Network Interface\n
Object key: bcmolt_pon_interface_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_pon_interface_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_pon_interface_ae_stats "Statistics: ae_stats", Object statistics}
\TABLE_ROW2{\subpage object_pon_interface_itu_pon_stats "Statistics: itu_pon_stats", Object statistics}
\TABLE_ROW2{\subpage object_pon_interface_ae_stats_cfg "StatisticsConfig: ae_stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_pon_interface_itu_pon_stats_cfg "StatisticsConfig: itu_pon_stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_pon_interface_activate_all_onus_completed "Indication: activate_all_onus_completed", Indicate the activation of all ONUs are completed\, in response to 'set_onu_state' operation.}
\TABLE_ROW2{\subpage object_pon_interface_ae_stats_alarm_cleared "Indication: ae_stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_pon_interface_ae_stats_alarm_raised "Indication: ae_stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_pon_interface_cpu_packets_failure "Indication: cpu_packets_failure", A failure was encountered during the "cpu_packets" proxy operation.}
\TABLE_ROW2{\subpage object_pon_interface_deactivate_all_onus_completed "Indication: deactivate_all_onus_completed", Indicate the deactivation of all ONUs are completed\, in response to 'set_onu_state' operation.}
\TABLE_ROW2{\subpage object_pon_interface_disable_all_onus_completed "Indication: disable_all_onus_completed", Indicate the disabling all ONUs are completed\, in response to 'set_onu_state' operation.}
\TABLE_ROW2{\subpage object_pon_interface_enable_all_onus_completed "Indication: enable_all_onus_completed", Indicate the enabling all ONUs are completed\, in response to 'set_onu_state' operation.}
\TABLE_ROW2{\subpage object_pon_interface_ieee_rogue_detection_completed "Indication: ieee_rogue_detection_completed", IEEE Rogue Detection Completed}
\TABLE_ROW2{\subpage object_pon_interface_itu_pon_stats_alarm_cleared "Indication: itu_pon_stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_pon_interface_itu_pon_stats_alarm_raised "Indication: itu_pon_stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
\TABLE_ROW2{\subpage object_pon_interface_los "Indication: los", LOS}
\TABLE_ROW2{\subpage object_pon_interface_mpcp_timestamp_changed "Indication: mpcp_timestamp_changed", A clock transport pulse was received at the given MPCP timestamp.}
\TABLE_ROW2{\subpage object_pon_interface_onu_discovered "Indication: onu_discovered", ONU Discovered}
\TABLE_ROW2{\subpage object_pon_interface_onu_upgrade_complete "Indication: onu_upgrade_complete", ONU Upgrade Complete}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_onus_ranged "Indication: protection_switching_onus_ranged", After a switchover is complete and all ONU ranging times have stabilized\, this indication is sent to inform the host of all new ONU EQDs.}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_rerange_failure "Indication: protection_switching_rerange_failure", Indicates the re-ranging process has failed}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_switchover_completed "Indication: protection_switching_switchover_completed", Protection Switching Switchover Completed}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_traffic_resume "Indication: protection_switching_traffic_resume", Protection Switching Traffic Resume}
\TABLE_ROW2{\subpage object_pon_interface_rogue_detection_tool_done "Indication: rogue_detection_tool_done", rogue sgb detection tool done}
\TABLE_ROW2{\subpage object_pon_interface_serial_number_acquisition_cycle_start "Indication: serial_number_acquisition_cycle_start", Serial Number Acquisition Cycle Start}
\TABLE_ROW2{\subpage object_pon_interface_standby_pon_monitoring_cycle_completed "Indication: standby_pon_monitoring_cycle_completed", Standby PON Monitoring Cycle Completed}
\TABLE_ROW2{\subpage object_pon_interface_state_change_completed "Indication: state_change_completed", State Change Completed}
\TABLE_ROW2{\subpage object_pon_interface_switch_pon_type_completed "Indication: switch_pon_type_completed", Switch PON type completed}
\TABLE_ROW2{\subpage object_pon_interface_tod_request_completed "Indication: tod_request_completed", TOD request completed}
\TABLE_ROW2{\subpage object_pon_interface_abort_onu_upgrade "Operation: abort_onu_upgrade", Abort OLT to ONU firmware transfer}
\TABLE_ROW2{\subpage object_pon_interface_broadcast_ploam_packet "Operation: broadcast_ploam_packet", Broadcast PLOAM Packet}
\TABLE_ROW2{\subpage object_pon_interface_cpu_packets "Operation: cpu_packets", XGPON CPU packets}
\TABLE_ROW2{\subpage object_pon_interface_disable_serial_number "Operation: disable_serial_number", Disable Serial Number}
\TABLE_ROW2{\subpage object_pon_interface_onu_upgrade_activate_commit "Operation: onu_upgrade_activate_commit", Perform the activate/commit phase of the ONU upgrade (ITU mode only)}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_apply_rerange_delta "Operation: protection_switching_apply_rerange_delta", Protection switching apply re-range delta (IEEE)}
\TABLE_ROW2{\subpage object_pon_interface_protection_switching_type_c_set_multiple_onu_state "Operation: protection_switching_type_c_set_multiple_onu_state", protection switching type c set multiple onu state}
\TABLE_ROW2{\subpage object_pon_interface_reset "Operation: reset", Reset}
\TABLE_ROW2{\subpage object_pon_interface_rogue_detection_tool "Operation: rogue_detection_tool", Rogue Detection with SGB Capture Window}
\TABLE_ROW2{\subpage object_pon_interface_run_special_bw_map "Operation: run_special_bw_map", Run Special BW Map}
\TABLE_ROW2{\subpage object_pon_interface_set_onu_state "Operation: set_onu_state", Set the operation state of all ONUs.}
\TABLE_ROW2{\subpage object_pon_interface_set_pon_interface_state "Operation: set_pon_interface_state", Set PON Interface State}
\TABLE_ROW2{\subpage object_pon_interface_single_request_standby_pon_monitoring "Operation: single_request_standby_pon_monitoring", Single request standby PON Monitoring}
\TABLE_ROW2{\subpage object_pon_interface_start_onu_upgrade "Operation: start_onu_upgrade", OLT to ONU firmware transfer}
\TABLE_ROW2{\subpage object_pon_interface_switch_pon_type "Operation: switch_pon_type", Change type of specified PON (for ANY_PON system modes only)}
\TABLE_ROW2{\subpage object_pon_interface_tod_request "Operation: tod_request", TOD request}
</table>

@{ */

/** \page object_pon_interface_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_pon_interface_cfg\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Access,Default,Maximum}
\TABLE_ROW6{state,Interface state,\ref bcmolt_interface_state,R,BCMOLT_INTERFACE_STATE_INACTIVE, }
\TABLE_ROW6{pon_type,PON type: GPON\, XGPON\, XGS\, EPON ...,\ref bcmolt_pon_type,R, , }
\TABLE_ROW6{los_status,LoS Status,\ref bcmolt_status,R, , }
\TABLE_ROW6{los_initial_value,LOS initial value following PON activation,\ref bcmolt_status,RW,BCMOLT_STATUS_OFF, }
\TABLE_ROW6{discovery,Serial Number process configuration,\ref bcmolt_service_discovery,RW, , }
\TABLE_ROW6{itu,ITU PON Attributes,\ref bcmolt_itu_pon_params,RW, , }
\TABLE_ROW6{pon_distance,PON distance,\ref bcmolt_pon_distance,RW, , }
\TABLE_ROW6{number_of_active_onus,Number of active ONUs on the PON,uint16_t,R, , }
\TABLE_ROW6{number_of_active_standby_onus,Number of active standby ONUs on the PON,uint16_t,R, , }
\TABLE_ROW6{gpon_trx,gpon transceiver parameters,\ref bcmolt_gpon_trx,RW, , }
\TABLE_ROW6{xgpon_trx,xgpon transceiver parameters,\ref bcmolt_xgpon_trx,RW, , }
\TABLE_ROW6{xgs_ngpon2_trx,xgs or ngpon2 transceiver params,\ref bcmolt_xgpon_trx,RW, , }
\TABLE_ROW6{los_wait_timeout,los wait timeout in ms,uint32_t,RW,10UL,1000UL}
</table>
\n\n */

/** \page object_pon_interface_ae_stats Statistics: ae_stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_pon_interface_ae_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,The number of bytes received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames,The number of frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_64,The number of 64 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_65_127,The number of 65 to 127 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_128_255,The number of 128 to 255 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_256_511,The number of 256 to 511 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_512_1023,The number of 512 to 1023 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_1024_1518,The number of 1024 to 1518 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_1519_2047,The number of 1519 to 2047 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_2048_4095,The number of 2048 to 4095 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_4096_9216,The number of 4096 to 9216 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_frames_9217_16383,The number of 9217 to 16383 byte frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_broadcast_frames,The number of broadcast frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_data_bytes,The number of data bytes received on this interface.,uint64_t}
\TABLE_ROW3{rx_multicast_frames,The number of multicast frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_unicast_frames,The number of unicast frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_abort_frames,The number of abort frames received on this interface.,uint64_t}
\TABLE_ROW3{rx_fcs_error,The number of bad FCS errors received on this interface.,uint64_t}
\TABLE_ROW3{rx_oversize_error,The number of oversize errors received on this interface.,uint64_t}
\TABLE_ROW3{rx_runt_error,The number of runt errors received on this interface.,uint64_t}
\TABLE_ROW3{tx_bytes,The number of bytes transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames,The number of frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_64,The number of 64 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_65_127,The number of 65 to 127 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_128_255,The number of 128 to 255 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_256_511,The number of 256 to 511 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_512_1023,The number of 512 to 1023 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_1024_1518,The number of 1024 to 1518 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_1519_2047,The number of 1519 to 2047 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_2048_4095,The number of 2048 to 4095 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_4096_9216,The number of 4096 to 9216 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_frames_9217_16383,The number of 9217 to 16383 byte frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_broadcast_frames,The number of broadcast frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_data_bytes,The number of data bytes transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_multicast_frames,The number of multicast frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_unicast_frames,The number of unicast frames transmitted on this interface.,uint64_t}
\TABLE_ROW3{tx_abort_frames,Number of abort frames transmitted on this interface.,uint64_t}
</table>
\n\n */

/** \page object_pon_interface_itu_pon_stats Statistics: itu_pon_stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_pon_interface_itu_pon_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{fec_codewords,Receive FEC codewords,uint64_t}
\TABLE_ROW3{bip_units,Received units (bits in GPON / bytes in XGPON) protected by bip,uint64_t}
\TABLE_ROW3{bip_errors,Received bip errors,uint64_t}
\TABLE_ROW3{rx_gem,Received valid GEM frames,uint64_t}
\TABLE_ROW3{rx_gem_dropped,Received dropped GEM ID frames,uint64_t}
\TABLE_ROW3{rx_gem_idle,Received idle GEM frames,uint64_t}
\TABLE_ROW3{rx_gem_corrected,Received corrected GEM frames,uint64_t}
\TABLE_ROW3{rx_crc_error,Received packets with CRC error,uint64_t}
\TABLE_ROW3{rx_fragment_error,Received fragment errors,uint64_t}
\TABLE_ROW3{rx_packets_dropped,Global dropped packets,uint64_t}
\TABLE_ROW3{rx_dropped_too_short,Received packets dropped due to length too short,uint64_t}
\TABLE_ROW3{rx_dropped_too_long,Received packet dropped due to length too long,uint64_t}
\TABLE_ROW3{rx_key_error,Received key errors,uint64_t}
\TABLE_ROW3{rx_cpu_omci_packets_dropped,Received packets dropped due to illegal length,uint8_t}
\TABLE_ROW3{tx_ploams,Transmitted Ploams,uint64_t}
\TABLE_ROW3{rx_ploams_dropped,Received dropped Ploams,uint64_t}
\TABLE_ROW3{rx_allocations_valid,Received valid allocations,uint64_t}
\TABLE_ROW3{rx_allocations_invalid,Received invalid allocations,uint64_t}
\TABLE_ROW3{rx_allocations_disabled,Received disabled allocations,uint64_t}
\TABLE_ROW3{rx_ploams,Received Ploams,uint64_t}
\TABLE_ROW3{rx_ploams_non_idle,Received non idle Ploams,uint64_t}
\TABLE_ROW3{rx_ploams_error,Received error Ploams,uint64_t}
\TABLE_ROW3{rx_cpu,Received CPU packets,uint64_t}
\TABLE_ROW3{rx_omci,Received OMCI packets,uint64_t}
\TABLE_ROW3{rx_omci_packets_crc_error,Received OMCI packets with CRC errors,uint64_t}
\TABLE_ROW3{tx_packets,Transmitted packets,uint64_t}
\TABLE_ROW3{tx_gem,Transmitted GEM frames,uint64_t}
\TABLE_ROW3{tx_cpu,Transmitted CPU packets,uint64_t}
\TABLE_ROW3{tx_omci,Transmitted OMCI packets,uint64_t}
\TABLE_ROW3{tx_dropped_illegal_length,Transmit packets dropped due to illegal length,uint64_t}
\TABLE_ROW3{tx_dropped_tpid_miss,Transmit packets dropped due to TPID miss,uint64_t}
\TABLE_ROW3{tx_dropped_vid_miss,Transmit packets droped due to VID miss,uint64_t}
\TABLE_ROW3{tx_dropped_total,Total transmit packets droped ,uint64_t}
\TABLE_ROW3{rx_xgtc_headers,Received valid XGTC headers,uint64_t}
\TABLE_ROW3{rx_xgtc_corrected,Received corrected XGTC headers,uint64_t}
\TABLE_ROW3{rx_xgtc_uncorrected,Received uncorrected XGTC headers,uint64_t}
\TABLE_ROW3{fec_codewords_uncorrected,Received uncorrected FEC codewords,uint64_t}
\TABLE_ROW3{rx_gem_illegal,Received illegal GEM frames,uint64_t}
\TABLE_ROW3{rx_packets,Received packets,uint64_t}
</table>
\n\n */

/** \page object_pon_interface_ae_stats_cfg StatisticsConfig: ae_stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_pon_interface_ae_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,The number of bytes received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames,The number of frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_64,The number of 64 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_65_127,The number of 65 to 127 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_128_255,The number of 128 to 255 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_256_511,The number of 256 to 511 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_512_1023,The number of 512 to 1023 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1024_1518,The number of 1024 to 1518 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1519_2047,The number of 1519 to 2047 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_2048_4095,The number of 2048 to 4095 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_4096_9216,The number of 4096 to 9216 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_9217_16383,The number of 9217 to 16383 byte frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_broadcast_frames,The number of broadcast frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_data_bytes,The number of data bytes received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_multicast_frames,The number of multicast frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unicast_frames,The number of unicast frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_abort_frames,The number of abort frames received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fcs_error,The number of bad FCS errors received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_oversize_error,The number of oversize errors received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_runt_error,The number of runt errors received on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,The number of bytes transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames,The number of frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_64,The number of 64 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_65_127,The number of 65 to 127 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_128_255,The number of 128 to 255 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_256_511,The number of 256 to 511 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_512_1023,The number of 512 to 1023 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1024_1518,The number of 1024 to 1518 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1519_2047,The number of 1519 to 2047 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_2048_4095,The number of 2048 to 4095 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_4096_9216,The number of 4096 to 9216 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_9217_16383,The number of 9217 to 16383 byte frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_broadcast_frames,The number of broadcast frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_data_bytes,The number of data bytes transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_multicast_frames,The number of multicast frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_unicast_frames,The number of unicast frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_abort_frames,Number of abort frames transmitted on this interface.,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_pon_interface_itu_pon_stats_cfg StatisticsConfig: itu_pon_stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_pon_interface_itu_pon_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{fec_codewords,Receive FEC codewords,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{bip_units,Received units (bits in GPON / bytes in XGPON) protected by bip,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{bip_errors,Received bip errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_gem,Received valid GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_gem_dropped,Received dropped GEM ID frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_gem_idle,Received idle GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_gem_corrected,Received corrected GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_crc_error,Received packets with CRC error,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fragment_error,Received fragment errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets_dropped,Global dropped packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_dropped_too_short,Received packets dropped due to length too short,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_dropped_too_long,Received packet dropped due to length too long,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_key_error,Received key errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_cpu_omci_packets_dropped,Received packets dropped due to illegal length,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_ploams,Transmitted Ploams,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams_dropped,Received dropped Ploams,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_allocations_valid,Received valid allocations,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_allocations_invalid,Received invalid allocations,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_allocations_disabled,Received disabled allocations,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams,Received Ploams,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams_non_idle,Received non idle Ploams,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ploams_error,Received error Ploams,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_cpu,Received CPU packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_omci,Received OMCI packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_omci_packets_crc_error,Received OMCI packets with CRC errors,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,Transmitted packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_gem,Transmitted GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_cpu,Transmitted CPU packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_omci,Transmitted OMCI packets,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_dropped_illegal_length,Transmit packets dropped due to illegal length,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_dropped_tpid_miss,Transmit packets dropped due to TPID miss,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_dropped_vid_miss,Transmit packets droped due to VID miss,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_dropped_total,Total transmit packets droped ,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_xgtc_headers,Received valid XGTC headers,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_xgtc_corrected,Received corrected XGTC headers,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_xgtc_uncorrected,Received uncorrected XGTC headers,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{fec_codewords_uncorrected,Received uncorrected FEC codewords,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_gem_illegal,Received illegal GEM frames,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets,Received packets,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_pon_interface_activate_all_onus_completed Indication: activate_all_onus_completed

Indicate the activation of all ONUs are completed, in response to 'set_onu_state' operation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_activate_all_onus_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_ae_stats_alarm_cleared Indication: ae_stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_ae_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_pon_interface_ae_stats_data_id}
</table>
\n\n */

/** \page object_pon_interface_ae_stats_alarm_raised Indication: ae_stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_ae_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_pon_interface_ae_stats_data_id}
</table>
\n\n */

/** \page object_pon_interface_cpu_packets_failure Indication: cpu_packets_failure

A failure was encountered during the "cpu_packets" proxy operation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_cpu_packets_failure\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{error,The error that was encountered.,\ref bcmolt_packet_injection_error}
\TABLE_ROW3{gem_port_id,The GEM port that caused the error.,\ref bcmolt_gem_port_id}
</table>
\n\n */

/** \page object_pon_interface_deactivate_all_onus_completed Indication: deactivate_all_onus_completed

Indicate the deactivation of all ONUs are completed, in response to 'set_onu_state' operation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_deactivate_all_onus_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_disable_all_onus_completed Indication: disable_all_onus_completed

Indicate the disabling all ONUs are completed, in response to 'set_onu_state' operation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_disable_all_onus_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_enable_all_onus_completed Indication: enable_all_onus_completed

Indicate the enabling all ONUs are completed, in response to 'set_onu_state' operation.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_enable_all_onus_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_ieee_rogue_detection_completed Indication: ieee_rogue_detection_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_ieee_rogue_detection_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_itu_pon_stats_alarm_cleared Indication: itu_pon_stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_itu_pon_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_pon_interface_itu_pon_stats_data_id}
</table>
\n\n */

/** \page object_pon_interface_itu_pon_stats_alarm_raised Indication: itu_pon_stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_itu_pon_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_pon_interface_itu_pon_stats_data_id}
</table>
\n\n */

/** \page object_pon_interface_los Indication: los

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_los\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{status,status,\ref bcmolt_status}
</table>
\n\n */

/** \page object_pon_interface_mpcp_timestamp_changed Indication: mpcp_timestamp_changed

A clock transport pulse was received at the given MPCP timestamp.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_mpcp_timestamp_changed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{mpcp_timestamp,The MPCP time at which the pulse was received.,uint32_t}
</table>
\n\n */

/** \page object_pon_interface_onu_discovered Indication: onu_discovered

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_onu_discovered\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Default,Minimum,Maximum}
\TABLE_ROW6{serial_number,serial number,\ref bcmolt_serial_number, , , }
\TABLE_ROW6{ranging_time,ranging time,uint32_t, , , }
\TABLE_ROW6{onu_id,onu_id,\ref bcmolt_onu_id, , , }
\TABLE_ROW6{upstream_line_rate_capabilities,Upstream line rate capabilities,\ref bcmolt_upstream_line_rate_capabilities, , , }
\TABLE_ROW6{current_downstream_pon_id,The PON-ID received by the ONU in its current downstream wavelength channel,uint8_t, , , }
\TABLE_ROW6{current_upstream_pon_id,The PON-ID of the Channel Profile containing the descriptor of the upstream wavelength channel in which the ONU is transmitting,uint8_t, , , }
\TABLE_ROW6{calibration_record,Calibration record,\ref bcmolt_arr_calibration_record_8, , , }
\TABLE_ROW6{tuning_granularity,The tuning granularity of the ONU transmitted expressed in units of 1Ghz. Value of 0 indicates that the ONU does not support fine tuning / dithering,uint8_t,0, , }
\TABLE_ROW6{step_tuning_time,The value of the tuning time for a single granularity step\, expressed in unit of PHY frames. The value 0 indicates that the ONU does not support fine tuning / dithering,uint8_t,0,0,255}
\TABLE_ROW6{attenuation,The ONU attenuation in steps of 3dB at the time of the message transmission as part of the power levelling report. Value of 0 represents un-attenuated transmission,uint8_t,0,0,7}
\TABLE_ROW6{power_levelling_capabilities,The ONU supports attenuation level in step of 3dB,uint8_t,0,0,127}
</table>
\n\n */

/** \page object_pon_interface_onu_upgrade_complete Indication: onu_upgrade_complete

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_onu_upgrade_complete\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{overall_status,Overall status of the ONU upgrade (success or failure).,\ref bcmolt_pon_ni_onu_upgrade_status_code}
\TABLE_ROW3{file_size_in_bytes,Total size of the file to send in bytes.,uint32_t}
\TABLE_ROW3{onu_status,Status for each ONU that is part of the upgrade process.,\ref bcmolt_onu_upgrade_status_list_u32_max_128}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_onus_ranged Indication: protection_switching_onus_ranged

After a switchover is complete and all ONU ranging times have stabilized, this indication is sent to inform the host of all new ONU EQDs.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_protection_switching_onus_ranged\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{onus,ONUs,\ref bcmolt_itupon_onu_eqd_list_u32}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_rerange_failure Indication: protection_switching_rerange_failure

Indicates the re-ranging process has failed\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_protection_switching_rerange_failure\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_switchover_completed Indication: protection_switching_switchover_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_protection_switching_switchover_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,Result,\ref bcmolt_result}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_traffic_resume Indication: protection_switching_traffic_resume

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_protection_switching_traffic_resume\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,Result,\ref bcmolt_traffic_resume_result}
</table>
\n\n */

/** \page object_pon_interface_rogue_detection_tool_done Indication: rogue_detection_tool_done

rogue sgb detection tool done\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_rogue_detection_tool_done\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,result,\ref bcmolt_result}
\TABLE_ROW3{output,output,\ref bcmolt_u64_list_u32_hex}
</table>
\n\n */

/** \page object_pon_interface_serial_number_acquisition_cycle_start Indication: serial_number_acquisition_cycle_start

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_serial_number_acquisition_cycle_start\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_standby_pon_monitoring_cycle_completed Indication: standby_pon_monitoring_cycle_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_standby_pon_monitoring_cycle_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{number_of_detected_delimiter,number of detected delimiter,uint32_t}
\TABLE_ROW3{energy_detect_signal,energy detect signal,\ref bcmolt_status}
</table>
\n\n */

/** \page object_pon_interface_state_change_completed Indication: state_change_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_state_change_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,Result,\ref bcmolt_result}
\TABLE_ROW3{previous_state,Previous state,\ref bcmolt_interface_state}
\TABLE_ROW3{new_state,new state,\ref bcmolt_interface_state}
</table>
\n\n */

/** \page object_pon_interface_switch_pon_type_completed Indication: switch_pon_type_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_switch_pon_type_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{result,Result of the operation,\ref bcmolt_result}
\TABLE_ROW3{fail_reason,Failure reason,\ref bcmolt_switch_pon_type_fail_reason}
\TABLE_ROW3{new_type,The new PON type that is set by the switch_pon_type operation. In case of failure it is the same as the old type.,\ref bcmolt_pon_type}
\TABLE_ROW3{old_type,The PON type before the switch PON type operation,\ref bcmolt_pon_type}
</table>
\n\n */

/** \page object_pon_interface_tod_request_completed Indication: tod_request_completed

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_pon_interface_tod_request_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{tod_string,tod_string,\ref bcmolt_str_64}
\TABLE_ROW3{sfc,sfc,uint64_t}
\TABLE_ROW3{rtc_offset_sec,rtc_offset_sec,uint64_t}
\TABLE_ROW3{rtc_offset_nsec,rtc_offset_nsec,uint32_t}
\TABLE_ROW3{status,status,\ref bcmolt_result}
</table>
\n\n */

/** \page object_pon_interface_abort_onu_upgrade Operation: abort_onu_upgrade

Abort OLT to ONU firmware transfer\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_abort_onu_upgrade\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_broadcast_ploam_packet Operation: broadcast_ploam_packet

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_broadcast_ploam_packet\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{ploam,ploam,\ref bcmolt_bin_str_40}
</table>
\n\n */

/** \page object_pon_interface_cpu_packets Operation: cpu_packets

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_cpu_packets\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{packet_type,packet type,\ref bcmolt_packet_type}
\TABLE_ROW3{calc_crc,calc crc,bcmos_bool}
\TABLE_ROW3{gem_port_list,gem port list,\ref bcmolt_gem_port_id_list_u8_max_16}
\TABLE_ROW3{buffer,buffer,\ref bcmolt_bin_str}
</table>
\n\n */

/** \page object_pon_interface_disable_serial_number Operation: disable_serial_number

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_disable_serial_number\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{control,control,\ref bcmolt_disable_serial_number_control}
\TABLE_ROW3{serial_number,serial number,\ref bcmolt_serial_number}
</table>
\n\n */

/** \page object_pon_interface_onu_upgrade_activate_commit Operation: onu_upgrade_activate_commit

Perform the activate/commit phase of the ONU upgrade (ITU mode only)\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_onu_upgrade_activate_commit\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{list_of_onu_ids,List of ONU IDs to upgrade the firmware.,\ref bcmolt_onu_id_list_u32}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_apply_rerange_delta Operation: protection_switching_apply_rerange_delta

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_protection_switching_apply_rerange_delta\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rerange_delta,Re-range delta,uint32_t}
</table>
\n\n */

/** \page object_pon_interface_protection_switching_type_c_set_multiple_onu_state Operation: protection_switching_type_c_set_multiple_onu_state

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_protection_switching_type_c_set_multiple_onu_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{onu_state,onu state,\ref bcmolt_switch_over_type_c_onu_state}
\TABLE_ROW3{onu_list,onu list,\ref bcmolt_onu_id_list_u32}
</table>
\n\n */

/** \page object_pon_interface_reset Operation: reset

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_reset\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_rogue_detection_tool Operation: rogue_detection_tool

Rogue Detection with SGB Capture Window\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_rogue_detection_tool\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{start_offset,counted in 622/644 clock cycles,uint16_t}
\TABLE_ROW3{use_onu_id,collect data for specific onu = 1\, always collect data = 0,uint8_t}
\TABLE_ROW3{onu_id,onu id,uint8_t}
</table>
\n\n */

/** \page object_pon_interface_run_special_bw_map Operation: run_special_bw_map

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_run_special_bw_map\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{number_of_cycle,number of cycle,uint8_t}
\TABLE_ROW3{allocation_number,allocation number,uint8_t}
\TABLE_ROW3{bw_map_array,bw map array,uint8_t}
</table>
\n\n */

/** \page object_pon_interface_set_onu_state Operation: set_onu_state

Set the operation state of all ONUs.\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_set_onu_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{onu_state,New operation state of all ONUs.  The default operation may be configured by the XGPON NI configuration object : xgpon_ni.cfg.sn_acquisition.,\ref bcmolt_onu_operation}
</table>
\n\n */

/** \page object_pon_interface_set_pon_interface_state Operation: set_pon_interface_state

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_set_pon_interface_state\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{operation,PON interface operation,\ref bcmolt_interface_operation}
</table>
\n\n */

/** \page object_pon_interface_single_request_standby_pon_monitoring Operation: single_request_standby_pon_monitoring

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_single_request_standby_pon_monitoring\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** \page object_pon_interface_start_onu_upgrade Operation: start_onu_upgrade

OLT to ONU firmware transfer\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_start_onu_upgrade\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{list_of_onu_ids,List of ONU IDs to upgrade the firmware.,\ref bcmolt_onu_id_list_u32}
</table>
\n\n */

/** \page object_pon_interface_switch_pon_type Operation: switch_pon_type

Change type of specified PON (for ANY_PON system modes only)\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_switch_pon_type\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{new_pon_type,The PON type requested by switch_pon_type operation,\ref bcmolt_pon_type}
</table>
\n\n */

/** \page object_pon_interface_tod_request Operation: tod_request

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_pon_interface_tod_request\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** @}  */
/** \page object_protection_interface Object: protection_interface - Protection Interface

Virtual interface type used to represent a redundant pair of physical interfaces\n
Object key: bcmolt_protection_interface_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_protection_interface_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_protection_interface_protection_switch_completed "Indication: protection_switch_completed", Protection Switch Complete Indication}
\TABLE_ROW2{\subpage object_protection_interface_protection_switch "Operation: protection_switch", Triggers a Protection Switch on a Protection Interface object}
</table>

@{ */

/** \page object_protection_interface_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_protection_interface_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{state,Not Configured or Configured,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED}
\TABLE_ROW5{primary_interface,Primary Interface Reference with type,\ref bcmolt_intf_ref,RW, }
\TABLE_ROW5{secondary_interface,Secondary Interface Reference with type,\ref bcmolt_intf_ref,RW, }
\TABLE_ROW5{active_interface,Currently active interface in protection interface pair (Primary or Secondary),\ref bcmolt_active_interface,R,BCMOLT_ACTIVE_INTERFACE_UNASSIGNED}
</table>
\n\n */

/** \page object_protection_interface_protection_switch_completed Indication: protection_switch_completed

Protection Switch Complete Indication\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_protection_interface_protection_switch_completed\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{active_interface,Newly active Interface (Primary or Secondary),\ref bcmolt_active_interface}
</table>
\n\n */

/** \page object_protection_interface_protection_switch Operation: protection_switch

Triggers a Protection Switch on a Protection Interface object\n

 - APIs: bcmolt_oper_submit()
 - Parameter: \ref bcmolt_protection_interface_protection_switch\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
</table>
\n\n */

/** @}  */
/** \page object_software_error Object: software_error - Software Error

\n
Object key: bcmolt_software_error_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_software_error_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_software_error_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_software_error_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{entry,Entry,\ref bcmolt_sw_error,R}
</table>
\n\n */

/** @}  */
/** \page object_switch_inni Object: switch_inni - switch inni

switch inni which is connected to the mac inni\n
Object key: bcmolt_switch_inni_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_switch_inni_cfg "cfg", Object configuration}
\TABLE_ROW2{\subpage object_switch_inni_stats "Statistics: stats", Object statistics}
\TABLE_ROW2{\subpage object_switch_inni_stats_cfg "StatisticsConfig: stats_cfg", Object statistics configuration}
\TABLE_ROW2{\subpage object_switch_inni_stats_alarm_cleared "Indication: stats_alarm_cleared", Sent when a configured statistic alarm condition is no longer met.}
\TABLE_ROW2{\subpage object_switch_inni_stats_alarm_raised "Indication: stats_alarm_raised", Sent when a configured statistic alarm condition has been met.}
</table>

@{ */

/** \page object_switch_inni_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_switch_inni_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{config_state,config state,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_CONFIGURED}
</table>
\n\n */

/** \page object_switch_inni_stats Statistics: stats

 - APIs: bcmolt_stat_get(), bcmolt_multi_stat_get()
 - Parameter: \ref bcmolt_switch_inni_stats\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,uint64_t}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{rx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,uint64_t}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,uint64_t}
\TABLE_ROW3{tx_bytes,RFC 2233,uint64_t}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,uint64_t}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,uint64_t}
\TABLE_ROW3{tx_error_packets,RFC 1213,uint64_t}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,uint64_t}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),uint64_t}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,uint64_t}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,uint64_t}
</table>
\n\n */

/** \page object_switch_inni_stats_cfg StatisticsConfig: stats_cfg

 - APIs: bcmolt_stat_cfg_get(), bcmolt_stat_cfg_set()
 - Parameter: \ref bcmolt_switch_inni_stats_cfg\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{rx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_mcast_packets,EFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_fcs_error_packets,RFC 2665,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_oversize_packets,Rx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_unknown_protos,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bytes,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_packets,RFC 1213 ucast + none-ucast,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_ucast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_mcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_bcast_packets,RFC 2233,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_error_packets,RFC 1213,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_undersize_packets,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_oversize_packets,Tx component of RFC 2665 snmpEtherStatsOversizePkts,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_jabber_packets,RFC 1757 (EtherStat),\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{rx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_64,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_65_127,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_128_255,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_256_511,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_512_1023,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1024_1518,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_1519_2047,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_2048_4095,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_4096_9216,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
\TABLE_ROW3{tx_frames_9217_16383,Broadcom-Specific,\ref bcmolt_stat_alarm_config}
</table>
\n\n */

/** \page object_switch_inni_stats_alarm_cleared Indication: stats_alarm_cleared

Sent when a configured statistic alarm condition is no longer met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_switch_inni_stats_alarm_cleared\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_switch_inni_stats_data_id}
</table>
\n\n */

/** \page object_switch_inni_stats_alarm_raised Indication: stats_alarm_raised

Sent when a configured statistic alarm condition has been met.\n

 - APIs: bcmolt_ind_subscribe(), bcmolt_ind_unsubscribe()
 - Specific Type: \ref bcmolt_switch_inni_stats_alarm_raised\n
<table>
\TABLE_HDR3{Parameter Name,Parameter Description,Data Type}
\TABLE_ROW3{stat,Statistic identifier.,\ref bcmolt_switch_inni_stats_data_id}
</table>
\n\n */

/** @}  */
/** \page object_tc_to_queue Object: tc_to_queue - tc_to_queue

tc to queue\n
Object key: bcmolt_tc_to_queue_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_tc_to_queue_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_tc_to_queue_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_tc_to_queue_cfg\n
<table>
\TABLE_HDR4{Parameter Name,Parameter Description,Data Type,Access}
\TABLE_ROW4{queue,queue ref for each tc 0..7,\ref bcmolt_arr_tm_queue_ref_8,RW}
</table>
\n\n */

/** @}  */
/** \page object_tm_qmp Object: tm_qmp - tm_qmp

\n
Object key: bcmolt_tm_qmp_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_tm_qmp_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_tm_qmp_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_tm_qmp_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{type,type,\ref bcmolt_tm_qmp_type,RW,BCMOLT_TM_QMP_TYPE_UNDEFINED}
\TABLE_ROW5{pbits_to_tmq_id,pbits_to_tmq_id,\ref bcmolt_arr_u8_8,RW, }
\TABLE_ROW5{ref_count,ref_count,uint16_t,R,0U}
\TABLE_ROW5{state,state,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED}
</table>
\n\n */

/** @}  */
/** \page object_tm_queue Object: tm_queue - tm_queue

Traffic Management queue\n
Object key: bcmolt_tm_queue_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_tm_queue_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_tm_queue_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_tm_queue_cfg\n
<table>
\TABLE_HDR5{Parameter Name,Parameter Description,Data Type,Access,Default}
\TABLE_ROW5{state,State,\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED}
\TABLE_ROW5{tm_sched_param,Scheduling priority,\ref bcmolt_tm_sched_param,RW, }
\TABLE_ROW5{rate,Rate shaping parameters,\ref bcmolt_tm_shaping,RW,0\,0\,0}
\TABLE_ROW5{ref_count,reference count (flows),uint16_t,R,0U}
\TABLE_ROW5{control_state,enable or disable state of the TM queue,\ref bcmolt_control_state,RW,BCMOLT_CONTROL_STATE_ENABLE}
\TABLE_ROW5{cir_attachment_point,TM sched and priority line where CIR queue is attached,\ref bcmolt_tm_sched_attachment_point,RW, }
</table>
\n\n */

/** @}  */
/** \page object_tm_sched Object: tm_sched - tm_sched

Scheduling node\n
Object key: bcmolt_tm_sched_key\n

<table>
\TABLE_HDR2{Subgroup,Description}
\TABLE_ROW2{\subpage object_tm_sched_cfg "cfg", Object configuration}
</table>

@{ */

/** \page object_tm_sched_cfg Object configuration

 - APIs: bcmolt_cfg_get(), bcmolt_cfg_set(), bcmolt_cfg_clear(), bcmolt_multi_cfg_get()
 - Parameter: \ref bcmolt_tm_sched_cfg\n
<table>
\TABLE_HDR6{Parameter Name,Parameter Description,Data Type,Access,Default,Maximum}
\TABLE_ROW6{attachment_point,The output of the tm_sched object instance,\ref bcmolt_tm_sched_attachment_point,RW, , }
\TABLE_ROW6{sched_type,Scheduler type,\ref bcmolt_tm_sched_type,RW, , }
\TABLE_ROW6{num_priorities,Max number of strict priority scheduling elements. ,uint8_t,RW, ,9}
\TABLE_ROW6{rate,Rate shaping parameters,\ref bcmolt_tm_shaping,RW,0\,0\,0, }
\TABLE_ROW6{state,Current state of object. (Not Configured or Active),\ref bcmolt_config_state,R,BCMOLT_CONFIG_STATE_NOT_CONFIGURED, }
\TABLE_ROW6{cir_attachment_point,TM sched and priority line where CIR queue can be attached,\ref bcmolt_tm_sched_attachment_point,RW, , }
</table>
\n\n */

/** @}  */
/** @}  */

/*! \file bcmolt_api_model_api_structs.h */
/*! \file bcmolt_api_model_supporting_structs.h */
/*! \file bcmolt_api_model_supporting_typedefs.h */
/*! \file bcmolt_api_model_supporting_enums.h */
