/*
 * 686xx Reference Guide - introducery text
 */

/** \mainpage BCM686xx API Concept

\section intro Introduction
This document describes the user interface for the BCM686xx device. The user interface is constructed from a
set of predefined APIs and an objects model.

The objects model is designed to manage different entities in the system, and enables a simple and intuitive
approach for managing the PON link.

The API layer is designed to enable the management of multiple BCM686xx devices and support any host
application architecture. It includes a set of APIs to access the BCM686xx configuration and
asynchronous indications to send events to the host application.

The API layer is part of the Broadcom® BCM686xx SDK, which is provided as C source code, which is
independent of the CPU and operating system being used.

\section object_model System Model

The system is modeled as a set of managed objects. The term “object” here doesn’t imply any inheritance, it
means an entity that can be addressed individually and has a set of properties (attributes) and methods
(operations), for example, device, ponlink, onu, etc.

Each object can have multiple properties, whereas a property is an object parameter that can be set or
retrieved independently.
	- A property is a simple type or a structure containing one or more fields, where fields can themselves be
structures
	- Each property has a specific permission type, such as Read-Only (RO) and Read-Write (RW).

Object properties are grouped into sections/management groups. The following sections can contain zero or
more properties:
	- Key—Field(s) that uniquely identify the object instance (for example, ONU key = {link_id, onu_id}).
	- Configuration
		- Properties in this group are either hard-coded (for example, the version) or stored in the BCM686xx
		  firmware data base (for example, link configuration) or host data base (for example, flow configuration).
		- Configuration properties can be defined as Read-Only or Read-Write.
	- Statistics
		- Performance monitoring counters
		- Debug counters
	- Autonomous Indications
		- Events triggered by the BCM686xx firmware or host driver and sent to the host application using messages.
		  Indications can be either autonomous (such as alarms) or asynchronous responses to previously
          submitted configuration change or operation (for instance, ranging complete indication during the ONU
          activation process).
	- Operations
		- Processes triggered by the API call. The progress and completion of an operation is indicated to the
          host application by an autonomous indication (such as ONU activation).

\section object_model_prop Object and Properties Implementation

\subsection object_model_structs Object Structures

The main input parameter of all the APIs is an object structure, referred to as the Object Request Message. Each
object section has a different structure that includes a generic header, object key, and a specific section structure
according to the section type (for example, configuration, statics, etc).
	- Generic header: A basic component of all the different section structures is the object generic header
	  \ref bcmolt_msg

	- The configuration structure bcmolt_xx_cfg contains:
		- The generic header \ref bcmolt_cfg
		- The object key, if any
		- The structure bcmolt_xx_cfg_data, containing all object configuration properties

	- This statistics structure bcmolt_xx_stat contains:
		- The generic header \ref bcmolt_stat
		- The object key, if any
		- The structure bcmolt_xx_stat_data, containing all the object statistics

	- The statistics configuration structure bcmolt_xx_stat_cfg contains:
		- The generic header \ref bcmolt_stat_cfg
			- The counter ID is stored in the subgroup field.
		- The object key, if any
		- The structure bcmolt_stat_cfg_data, containing statistic event configuration parameters

	- The operation structure bcmolt_xx_oper_yy contains:
		- The generic header \ref bcmolt_oper
			- The operation ID is stored in the subgroup field.
		- The object key, if any
		- The structure bcmolt_xx_oper_yy_data, containing all operation properties, if any

	- The per-autonomous indication structure bcmolt_xx_auto_yy contains:
		- The generic header \ref bcmolt_auto
			- The autonomous message ID is stored in the subgroup field.
		- The object key, if any
		- The structure bcmolt_xx_auto_yy_data, containing all indication properties, if any

	- The autonomous event configuration structure bcmolt_xx_auto_cfg containing
		- The generic header \ref bcmolt_auto_cfg
		- The object key, if any
		- The bcmolt_xx_auto_cfg_data structure, containing a Boolean per autonomous message

See details in \ref api

*/
